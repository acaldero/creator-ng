version: 2.0.0

config:
  name: Z80
  word_size: 8 # 8-bit word size, which is the same as the byte size
  byte_size: 8
  description: Z80
  endianness: little_endian
  memory_alignment: true
  main_function: main
  passing_convention: true
  sensitive_register_name: true
  comment_prefix: ";"
  start_address: 0x0
  pc_offset: 0
  assemblers:
    - name: "SjasmPlus" # The first element is the default assembler
      description: "SjasmPlus Z80 Assembler"
    - name: "RASM"
      description: "RASM Z80 Assembler"

components:
  - name: Control registers
    type: ctrl_registers
    double_precision: false
    elements:
      - name:
          - PC
        nbits: "16"
        value: 0
        default_value: 0
        properties:
          - read
          - write
          - program_counter
  - name: Integer registers
    type: int_registers
    double_precision: false
    elements:
      - name: [A]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: [B]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: [C]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: [D]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: [E]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: [H]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: [L]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: [I]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: ["A_prime"]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: ["B_prime"]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: ["C_prime"]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: ["D_prime"]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: ["E_prime"]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: ["H_prime"]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: ["L_prime"]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: [SP]
        nbits: "16"
        value: 65535
        default_value: 65535
        properties: [read, write, stack_pointer]
      - name: [IX]
        nbits: "16"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: [IY]
        nbits: "16"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: [F]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: [F_prime]
        nbits: "8"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: [IFF1]
        nbits: "1"
        value: 0
        default_value: 0
        properties: [read, write]
      - name: [IFF2]
        nbits: "1"
        value: 0
        default_value: 0
        properties: [read, write]

memory_layout:
  text:
    start: 0x0000
    end: 0x03FF
  data:
    start: 0x0400
    end: 0x7FFF
  stack:
    start: 0xFFFE
    end: 0xFFFF

templates:
  # Main Instructions
  - name: standard
    nwords: 1
    clk_cycles: 1
    fields:
      - name: opcode
        type: co
        startbit: 7
        stopbit: 0
        order: 0
        word: 0

  # IX Bit Instructions
  - name: DDCB
    nwords: 4
    clk_cycles: 1
    fields:
      - name: opcode1
        type: co
        startbit: 7
        stopbit: 0
        order: 0
        word: 0
        valueField: "11011101"
      - name: opcode2
        type: cop
        startbit: 7
        stopbit: 0
        word: 1
        valueField: "11001011"
      - name: imm
        type: inm-unsigned
        startbit: 7
        stopbit: 0
        prefix: "("
        suffix: ")"
        order: 1
        word: 2
      - name: opcode3
        type: cop
        startbit: 7
        stopbit: 0
        word: 3

  # IX Instructions
  - name: DD
    nwords: 2
    clk_cycles: 1
    fields:
      - name: opcode1
        type: co
        startbit: 7
        stopbit: 0
        order: 0
        word: 0
        valueField: "11011101"
      - name: opcode2
        type: cop
        startbit: 7
        stopbit: 0
        word: 1

  # Misc. Instructions
  - name: ED
    nwords: 2
    clk_cycles: 1
    fields:
      - name: opcode1
        type: co
        startbit: 7
        stopbit: 0
        order: 0
        word: 0
        valueField: "11101101"
      - name: opcode2
        type: cop
        startbit: 7
        stopbit: 0
        word: 1

  # IY Instructions
  - name: FD
    nwords: 2
    clk_cycles: 1
    fields:
      - name: opcode1
        type: co
        startbit: 7
        stopbit: 0
        order: 0
        word: 0
        valueField: "11111101"
      - name: opcode2
        type: cop
        startbit: 7
        stopbit: 0
        word: 1

  # IY Bit Instructions (IY-prefixed CB instructions)
  - name: FDCB
    nwords: 4
    clk_cycles: 1 # Base, will be overridden by instruction
    fields:
      - name: opcode1
        type: co
        startbit: 7
        stopbit: 0
        order: 0
        word: 0
        valueField: "11111101" # 0xFD prefix
      - name: opcode2
        type: cop
        startbit: 7
        stopbit: 0
        word: 1
        valueField: "11001011" # 0xCB prefix
      - name: d
        type: inm-signed
        startbit: 7
        stopbit: 0
        word: 2
      - name: opcode3
        type: cop
        startbit: 7
        stopbit: 0
        word: 3

  #Â Bit Instructions
  - name: CB
    nwords: 2
    clk_cycles: 1
    fields:
      - name: opcode1
        type: co
        startbit: 7
        stopbit: 0
        order: 0
        word: 0
        valueField: "11001011"
      - name: opcode2
        type: cop
        startbit: 7
        stopbit: 0
        word: 1

instructions:
  base:
    - name: nop
      template: standard
      fields:
        - field: opcode
          value: "0x00"
      definition: ""

    - name: ld
      template: standard
      nwords: 3
      fields:
        - field: opcode
          value: "0x01"
        - field: instructionFormatting
          type: skip
          value: "bc,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        // Loads 16-bit immediate into BC. Low byte to C, high byte to B.
        C = nn & 0xFFn;
        B = (nn >> 8n) & 0xFFn;

    - name: ex
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x08"
        - field: instructionFormatting
          type: skip
          value: "af,af'"
          order: 1
      definition: |
        // Exchanges the 16-bit contents of AF and AF'.
        let temp_reg;

        temp_reg = A;
        A = A_prime;
        A_prime = temp_reg;

        temp_reg = F;
        F = F_prime;
        F_prime = temp_reg;
  
    - name: djnz
      template: standard
      nwords: 2
      clk_cycles: 13 # 8 if not taken
      fields:
        - field: opcode
          value: "0x10"
        - field: e
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 1
          word: 1
      definition: |
        B = (B - 1n) & 0xFFn;
        if (B !== 0n) {
            // PC is already at address of next instruction, so add offset.
            PC = (PC + e) & 0xFFFFn;
        }

    - name: ld
      template: standard
      nwords: 3
      fields:
        - field: opcode
          value: "0x11"
        - field: instructionFormatting
          type: skip
          value: "de,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        // Loads 16-bit immediate into DE. Low byte to E, high byte to D.
        E = nn & 0xFFn;
        D = (nn >> 8n) & 0xFFn;

    - name: ld
      template: standard
      nwords: 3
      fields:
        - field: opcode
          value: "0x21"
        - field: instructionFormatting
          type: skip
          value: "hl,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        // Loads 16-bit immediate into HL. Low byte to L, high byte to H.
        L = nn & 0xFFn;
        H = (nn >> 8n) & 0xFFn;
      
    - name: cmp
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x2f"
      definition: |
        // The contents of A are inverted (one's complement)
        A = (~A) & 0xFFn;

    - name: ld
      template: standard
      nwords: 3
      fields:
        - field: opcode
          value: "0x31"
        - field: instructionFormatting
          type: skip
          value: "sp,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        // Loads 16-bit immediate into SP.
        SP = nn;

    - name: jp
      template: standard
      nwords: 3
      fields:
        - field: opcode
          value: "0xC3"
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 1
          word: [2, 1]
      definition: "PC = nn;"

    - name: jr
      template: standard
      nwords: 2
      clk_cycles: 12
      fields:
        - field: opcode
          value: "0x18"
        - field: e
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 1
          word: 1
      definition: |
        // PC is already at address of next instruction, so add offset.
        PC = (PC + e) & 0xFFFFn;
    - name: jr
      template: standard
      nwords: 2
      clk_cycles: 12 # 7 if not taken
      fields:
        - field: opcode
          value: "0x20"
        - field: instructionFormatting
          type: skip
          value: "nz,"
          order: 1
        - field: e
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 2
          word: 1
      definition: |
        // If the zero flag is unset, the signed value d is added to PC. 
        // The jump is measured from the start of the instruction opcode. 
        if ((F & CAPI.Z80.Z_FLAG) === 0n) {
            PC = (PC + e) & 0xFFFFn;
        }
    - name: jr
      template: standard
      nwords: 2
      clk_cycles: 12 # 7 if not taken
      fields:
        - field: opcode
          value: "0x28"
        - field: instructionFormatting
          type: skip
          value: "z,"
          order: 1
        - field: e
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 2
          word: 1
      definition: |
        if ((F & CAPI.Z80.Z_FLAG) !== 0n) {
            PC = (PC + e) & 0xFFFFn;
        }
    - name: jr
      template: standard
      nwords: 2
      clk_cycles: 12 # 7 if not taken
      fields:
        - field: opcode
          value: "0x30"
        - field: instructionFormatting
          type: skip
          value: "nc,"
          order: 1
        - field: e
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 2
          word: 1
      definition: |
        if ((F & CAPI.Z80.C_FLAG) === 0n) {
            PC = (PC + e) & 0xFFFFn;
        }
    - name: jr
      template: standard
      nwords: 2
      clk_cycles: 12 # 7 if not taken
      fields:
        - field: opcode
          value: "0x38"
        - field: instructionFormatting
          type: skip
          value: "c,"
          order: 1
        - field: e
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 2
          word: 1
      definition: |
        if ((F & CAPI.Z80.C_FLAG) !== 0n) {
            PC = (PC + e) & 0xFFFFn;
        }
    - name: jp
      template: standard
      nwords: 3
      clk_cycles: 10
      fields:
        - field: opcode
          value: "0xC2"
        - field: instructionFormatting
          type: skip
          value: "nz,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        if ((F & CAPI.Z80.Z_FLAG) === 0n) {
            PC = nn;
        }
    - name: jp
      template: standard
      nwords: 3
      clk_cycles: 10
      fields:
        - field: opcode
          value: "0xCA"
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
        - field: instructionFormatting
          type: skip
          value: "z,"
          order: 1
      definition: |
        if ((F & CAPI.Z80.Z_FLAG) !== 0n) {
            PC = nn;
        }
    - name: jp
      template: standard
      nwords: 3
      clk_cycles: 10
      fields:
        - field: opcode
          value: "0xD2"
        - field: instructionFormatting
          type: skip
          value: "nc,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        if ((F & CAPI.Z80.C_FLAG) === 0n) {
            PC = nn;
        }

    - name: out
      template: standard
      nwords: 2
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0xD3"
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          prefix: "("
          suffix: ")"
          order: 1
          word: 1
        - field: instructionFormatting
          type: skip
          value: ",a"
          order: 2
      definition: |
        // Writes the value of the Accumulator to the I/O port specified by n.
        CAPI.Z80.write(n, A);

    - name: rst 00h
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0xC7"
      definition: |
        // Push the address of the next instruction onto the stack.
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, PC & 0xFFn);
        // Jump to the RST address.
        PC = 0x00n;

    - name: rst 10h
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0xD7"
      definition: |
        // Push the address of the next instruction onto the stack.
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, PC & 0xFFn);
        // Jump to the RST address.
        PC = 0x10n;

    - name: rst 20h
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0xE7"
      definition: |
        // Push the address of the next instruction onto the stack.
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, PC & 0xFFn);
        // Jump to the RST address.
        PC = 0x20n;

    - name: rst 30h
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0xF7"
      definition: |
        // Push the address of the next instruction onto the stack.
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, PC & 0xFFn);
        // Jump to the RST address.
        PC = 0x30n;

    - name: in
      template: standard
      nwords: 2
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0xDB"
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          prefix: "("
          suffix: ")"
          order: 2
          word: 1
        - field: instructionFormatting
          type: skip
          value: ",a"
          order: 1
      definition: |
        // Reads a byte from the I/O port specified by n and stores it in the Accumulator.
        A = CAPI.Z80.read(n);

    - name: jp
      template: standard
      nwords: 3
      clk_cycles: 10
      fields:
        - field: opcode
          value: "0xDA"
        - field: instructionFormatting
          type: skip
          value: "c,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        if ((F & CAPI.Z80.C_FLAG) !== 0n) {
            PC = nn;
        }
    - name: jp
      template: standard
      nwords: 3
      clk_cycles: 10
      fields:
        - field: opcode
          value: "0xE2"
        - field: instructionFormatting
          type: skip
          value: "po,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        if ((F & CAPI.Z80.PV_FLAG) === 0n) {
            PC = nn;
        }

    - name: ex
      template: standard
      nwords: 1
      clk_cycles: 19
      fields:
        - field: opcode
          value: "0xE3"
        - field: instructionFormatting
          type: skip
          value: "(sp),hl"
          order: 1
      definition: |
        // Exchanges (SP) with L, and (SP+1) with H.
        const temp_L = L;
        const temp_H = H;
        const stack_low = CAPI.MEM.read(SP, 1);
        const stack_high = CAPI.MEM.read(SP + 1n, 1);

        L = stack_low;
        H = stack_high;

        CAPI.MEM.write(SP, 1, temp_L);
        CAPI.MEM.write(SP + 1n, 1, temp_H);

    - name: jp
      template: standard
      nwords: 3
      clk_cycles: 10
      fields:
        - field: opcode
          value: "0xEA"
        - field: instructionFormatting
          type: skip
          value: "pe,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        if ((F & CAPI.Z80.PV_FLAG) !== 0n) {
            PC = nn;
        }

    - name: ex
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xEB"
        - field: instructionFormatting
          type: skip
          value: "de, hl"
          order: 1
      definition: |
        // Exchanges the 16-bit contents of the DE and HL register pairs.
        let temp_reg;

        temp_reg = D;
        D = H;
        H = temp_reg;

        temp_reg = E;
        E = L;
        L = temp_reg;

    - name: jp (hl)
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xE9"
      definition: |
        PC = (H << 8n) | L;
    - name: jp
      template: standard
      nwords: 3
      clk_cycles: 10
      fields:
        - field: opcode
          value: "0xF2"
        - field: instructionFormatting
          type: skip
          value: "p,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        if ((F & CAPI.Z80.S_FLAG) === 0n) {
            PC = nn;
        }
    - name: jp
      template: standard
      nwords: 3
      clk_cycles: 10
      fields:
        - field: opcode
          value: "0xFA"
        - field: instructionFormatting
          type: skip
          value: "m,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        if ((F & CAPI.Z80.S_FLAG) !== 0n) {
            PC = nn;
        }

    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x40"
        - field: instructionFormatting
          type: skip
          value: "b, b"
          order: 1
      definition: |
        B = B;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x41"
        - field: instructionFormatting
          type: skip
          value: "b, c"
          order: 1
      definition: |
        B = C;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x42"
        - field: instructionFormatting
          type: skip
          value: "b, d"
          order: 1
      definition: |
        B = D;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x43"
        - field: instructionFormatting
          type: skip
          value: "b, e"
          order: 1
      definition: |
        B = E;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x44"
        - field: instructionFormatting
          type: skip
          value: "b, h"
          order: 1
      definition: |
        B = H;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x45"
        - field: instructionFormatting
          type: skip
          value: "b, l"
          order: 1
      definition: |
        B = L;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x46"
        - field: instructionFormatting
          type: skip
          value: "b, (hl)"
          order: 1
      definition: |
        B = CAPI.MEM.read((H << 8n) | L, 1);
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x47"
        - field: instructionFormatting
          type: skip
          value: "b, a"
          order: 1
      definition: |
        B = A;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x48"
        - field: instructionFormatting
          type: skip
          value: "c, b"
          order: 1
      definition: |
        C = B;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x49"
        - field: instructionFormatting
          type: skip
          value: "c, c"
          order: 1
      definition: |
        C = C;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x4A"
        - field: instructionFormatting
          type: skip
          value: "c, d"
          order: 1
      definition: |
        C = D;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x4B"
        - field: instructionFormatting
          type: skip
          value: "c, e"
          order: 1
      definition: |
        C = E;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x4C"
        - field: instructionFormatting
          type: skip
          value: "c, h"
          order: 1
      definition: |
        C = H;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x4D"
        - field: instructionFormatting
          type: skip
          value: "c, l"
          order: 1
      definition: |
        C = L;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x4E"
        - field: instructionFormatting
          type: skip
          value: "c, (hl)"
          order: 1
      definition: |
        C = CAPI.MEM.read((H << 8n) | L, 1);
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x4F"
        - field: instructionFormatting
          type: skip
          value: "c, a"
          order: 1
      definition: |
        C = A;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x50"
        - field: instructionFormatting
          type: skip
          value: "d, b"
          order: 1
      definition: |
        D = B;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x51"
        - field: instructionFormatting
          type: skip
          value: "d, c"
          order: 1
      definition: |
        D = C;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x52"
        - field: instructionFormatting
          type: skip
          value: "d, d"
          order: 1
      definition: |
        D = D;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x53"
        - field: instructionFormatting
          type: skip
          value: "d, e"
          order: 1
      definition: |
        D = E;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x54"
        - field: instructionFormatting
          type: skip
          value: "d, h"
          order: 1
      definition: |
        D = H;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x55"
        - field: instructionFormatting
          type: skip
          value: "d, l"
          order: 1
      definition: |
        D = L;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x56"
        - field: instructionFormatting
          type: skip
          value: "d, (hl)"
          order: 1
      definition: |
        D = CAPI.MEM.read((H << 8n) | L, 1);
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x57"
        - field: instructionFormatting
          type: skip
          value: "d, a"
          order: 1
      definition: |
        D = A;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x58"
        - field: instructionFormatting
          type: skip
          value: "e, b"
          order: 1
      definition: |
        E = B;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x59"
        - field: instructionFormatting
          type: skip
          value: "e, c"
          order: 1
      definition: |
        E = C;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x5A"
        - field: instructionFormatting
          type: skip
          value: "e, d"
          order: 1
      definition: |
        E = D;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x5B"
        - field: instructionFormatting
          type: skip
          value: "e, e"
          order: 1
      definition: |
        E = E;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x5C"
        - field: instructionFormatting
          type: skip
          value: "e, h"
          order: 1
      definition: |
        E = H;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x5D"
        - field: instructionFormatting
          type: skip
          value: "e, l"
          order: 1
      definition: |
        E = L;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x5E"
        - field: instructionFormatting
          type: skip
          value: "e, (hl)"
          order: 1
      definition: |
        E = CAPI.MEM.read((H << 8n) | L, 1);
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x5F"
        - field: instructionFormatting
          type: skip
          value: "e, a"
          order: 1
      definition: |
        E = A;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x60"
        - field: instructionFormatting
          type: skip
          value: "h, b"
          order: 1
      definition: |
        H = B;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x61"
        - field: instructionFormatting
          type: skip
          value: "h, c"
          order: 1
      definition: |
        H = C;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x62"
        - field: instructionFormatting
          type: skip
          value: "h, d"
          order: 1
      definition: |
        H = D;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x63"
        - field: instructionFormatting
          type: skip
          value: "h, e"
          order: 1
      definition: |
        H = E;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x64"
        - field: instructionFormatting
          type: skip
          value: "h, h"
          order: 1
      definition: |
        H = H;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x65"
        - field: instructionFormatting
          type: skip
          value: "h, l"
          order: 1
      definition: |
        H = L;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x66"
        - field: instructionFormatting
          type: skip
          value: "h, (hl)"
          order: 1
      definition: |
        H = CAPI.MEM.read((H << 8n) | L, 1);
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x67"
        - field: instructionFormatting
          type: skip
          value: "h, a"
          order: 1
      definition: |
        H = A;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x68"
        - field: instructionFormatting
          type: skip
          value: "l, b"
          order: 1
      definition: |
        L = B;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x69"
        - field: instructionFormatting
          type: skip
          value: "l, c"
          order: 1
      definition: |
        L = C;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x6A"
        - field: instructionFormatting
          type: skip
          value: "l, d"
          order: 1
      definition: |
        L = D;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x6B"
        - field: instructionFormatting
          type: skip
          value: "l, e"
          order: 1
      definition: |
        L = E;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x6C"
        - field: instructionFormatting
          type: skip
          value: "l, h"
          order: 1
      definition: |
        L = H;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x6D"
        - field: instructionFormatting
          type: skip
          value: "l, l"
          order: 1
      definition: |
        L = L;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x6E"
        - field: instructionFormatting
          type: skip
          value: "l, (hl)"
          order: 1
      definition: |
        L = CAPI.MEM.read((H << 8n) | L, 1);
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x6F"
        - field: instructionFormatting
          type: skip
          value: "l, a"
          order: 1
      definition: |
        L = A;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x70"
        - field: instructionFormatting
          type: skip
          value: "(hl), b"
          order: 1
      definition: |
        CAPI.MEM.write((H << 8n) | L, 1, B);
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x71"
        - field: instructionFormatting
          type: skip
          value: "(hl), c"
          order: 1
      definition: |
        CAPI.MEM.write((H << 8n) | L, 1, C);
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x72"
        - field: instructionFormatting
          type: skip
          value: "(hl), d"
          order: 1
      definition: |
        CAPI.MEM.write((H << 8n) | L, 1, D);
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x73"
        - field: instructionFormatting
          type: skip
          value: "(hl), e"
          order: 1
      definition: |
        CAPI.MEM.write((H << 8n) | L, 1, E);
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x74"
        - field: instructionFormatting
          type: skip
          value: "(hl), h"
          order: 1
      definition: |
        CAPI.MEM.write((H << 8n) | L, 1, H);
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x75"
        - field: instructionFormatting
          type: skip
          value: "(hl), l"
          order: 1
      definition: |
        CAPI.MEM.write((H << 8n) | L, 1, L);
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x77"
        - field: instructionFormatting
          type: skip
          value: "(hl), a"
          order: 1
      definition: |
        CAPI.MEM.write((H << 8n) | L, 1, A);
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x78"
        - field: instructionFormatting
          type: skip
          value: "a, b"
          order: 1
      definition: |
        A = B;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x79"
        - field: instructionFormatting
          type: skip
          value: "a, c"
          order: 1
      definition: |
        A = C;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x7A"
        - field: instructionFormatting
          type: skip
          value: "a, d"
          order: 1
      definition: |
        A = D;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x7B"
        - field: instructionFormatting
          type: skip
          value: "a, e"
          order: 1
      definition: |
        A = E;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x7C"
        - field: instructionFormatting
          type: skip
          value: "a, h"
          order: 1
      definition: |
        A = H;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x7D"
        - field: instructionFormatting
          type: skip
          value: "a, l"
          order: 1
      definition: |
        A = L;
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x7E"
        - field: instructionFormatting
          type: skip
          value: "a, (hl)"
          order: 1
      definition: |
        A = CAPI.MEM.read((H << 8n) | L, 1);
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x7F"
        - field: instructionFormatting
          type: skip
          value: "a, a"
          order: 1
      definition: |
        A = A;

    - name: add a, b
      template: standard
      fields:
        - field: opcode
          value: "0x80"
      definition: |
        const oldValueA = A;
        A = (oldValueA + B) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADD(oldValueA, B);

    - name: add a, c
      template: standard
      fields:
        - field: opcode
          value: "0x81"
      definition: |
        const oldValueA = A;
        A = (oldValueA + C) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADD(oldValueA, C);

    - name: add a, d
      template: standard
      fields:
        - field: opcode
          value: "0x82"
      definition: |
        const oldValueA = A;
        A = (oldValueA + D) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADD(oldValueA, D);

    - name: add a, e
      template: standard
      fields:
        - field: opcode
          value: "0x83"
      definition: |
        const oldValueA = A;
        A = (oldValueA + E) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADD(oldValueA, E);

    - name: add a, h
      template: standard
      fields:
        - field: opcode
          value: "0x84"
      definition: |
        const oldValueA = A;
        A = (oldValueA + H) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADD(oldValueA, H);

    - name: add a, l
      template: standard
      fields:
        - field: opcode
          value: "0x85"
      definition: |
        const oldValueA = A;
        A = (oldValueA + L) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADD(oldValueA, L);

    - name: add a, (hl)
      template: standard
      clk_cycles: 2
      fields:
        - field: opcode
          value: "0x86"
      definition: |
        const value = CAPI.MEM.read((H << 8n) | L, 1);
        const oldValueA = A;
        A = (oldValueA + value) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADD(oldValueA, value);

    - name: add a, a
      template: standard
      clk_cycles: 1
      fields:
        - field: opcode
          value: "0x87"
      definition: |
        const oldValueA = A;
        A = (oldValueA + oldValueA) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADD(oldValueA, oldValueA);

    - name: adc a, b
      template: standard
      fields:
        - field: opcode
          value: "0x88"
      definition: |
        const oldValueA = A;
        const valueB = B;
        A = (oldValueA + valueB + (F & 0x01n)) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADC(oldValueA, valueB, F);

    - name: adc a, c
      template: standard
      fields:
        - field: opcode
          value: "0x89"
      definition: |
        const oldValueA = A;
        const valueC = C;
        A = (oldValueA + valueC + (F & 0x01n)) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADC(oldValueA, valueC, F);

    - name: adc a, d
      template: standard
      fields:
        - field: opcode
          value: "0x8A"
      definition: |
        const oldValueA = A;
        const valueD = D;
        A = (oldValueA + valueD + (F & 0x01n)) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADC(oldValueA, valueD, F);

    - name: adc a, e
      template: standard
      fields:
        - field: opcode
          value: "0x8B"
      definition: |
        const oldValueA = A;
        const valueE = E;
        A = (oldValueA + valueE + (F & 0x01n)) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADC(oldValueA, valueE, F);

    - name: adc a, h
      template: standard
      fields:
        - field: opcode
          value: "0x8C"
      definition: |
        const oldValueA = A;
        const valueH = H;
        A = (oldValueA + valueH + (F & 0x01n)) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADC(oldValueA, valueH, F);

    - name: adc a, l
      template: standard
      fields:
        - field: opcode
          value: "0x8D"
      definition: |
        const oldValueA = A;
        const valueL = L;
        A = (oldValueA + valueL + (F & 0x01n)) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADC(oldValueA, valueL, F);

    - name: adc a, (hl)
      template: standard
      clk_cycles: 2
      fields:
        - field: opcode
          value: "0x8E"
      definition: |
        const value = CAPI.MEM.read((H << 8n) | L, 1);
        const oldValueA = A;
        A = (oldValueA + value + (F & 0x01n)) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADC(oldValueA, value, F);

    - name: adc a, a
      template: standard
      clk_cycles: 1
      fields:
        - field: opcode
          value: "0x8F"
      definition: |
        const oldValueA = A;
        A = (oldValueA + oldValueA + (F & 0x01n)) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADC(oldValueA, oldValueA, F);

    - name: sub b
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x90"
      definition: |
        const oldValueA = A;
        A = (oldValueA - B) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SUB(oldValueA, B);
    - name: sub c
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x91"
      definition: |
        const oldValueA = A;
        A = (oldValueA - C) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SUB(oldValueA, C);
    - name: sub d
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x92"
      definition: |
        const oldValueA = A;
        A = (oldValueA - D) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SUB(oldValueA, D);
    - name: sub e
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x93"
      definition: |
        const oldValueA = A;
        A = (oldValueA - E) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SUB(oldValueA, E);
    - name: sub h
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x94"
      definition: |
        const oldValueA = A;
        A = (oldValueA - H) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SUB(oldValueA, H);
    - name: sub l
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x95"
      definition: |
        const oldValueA = A;
        A = (oldValueA - L) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SUB(oldValueA, L);
    - name: sub (hl)
      template: standard
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x96"
      definition: |
        const value = CAPI.MEM.read((H << 8n) | L, 1);
        const oldValueA = A;
        A = (oldValueA - value) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SUB(oldValueA, value);
    - name: sub a
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x97"
      definition: |
        const oldValueA = A;
        A = 0n;
        F = CAPI.Z80.calculateFlags_SUB(oldValueA, oldValueA);
    - name: sub
      template: standard
      clk_cycles: 7
      nwords: 2
      fields:
        - field: opcode
          value: "0xD6"
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 1
          word: 1
      definition: |
        const oldValueA = A;
        A = (oldValueA - n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SUB(oldValueA, n);

    - name: sbc a, b
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x98"
      definition: |
        const oldValueA = A;
        const valueB = B;
        const carry = F & 0x01n;
        A = (oldValueA - valueB - carry) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SBC(oldValueA, valueB, F);
    - name: sbc a, c
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x99"
      definition: |
        const oldValueA = A;
        const valueC = C;
        const carry = F & 0x01n;
        A = (oldValueA - valueC - carry) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SBC(oldValueA, valueC, F);
    - name: sbc a, d
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x9A"
      definition: |
        const oldValueA = A;
        const valueD = D;
        const carry = F & 0x01n;
        A = (oldValueA - valueD - carry) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SBC(oldValueA, valueD, F);
    - name: sbc a, e
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x9B"
      definition: |
        const oldValueA = A;
        const valueE = E;
        const carry = F & 0x01n;
        A = (oldValueA - valueE - carry) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SBC(oldValueA, valueE, F);
    - name: sbc a, h
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x9C"
      definition: |
        const oldValueA = A;
        const valueH = H;
        const carry = F & 0x01n;
        A = (oldValueA - valueH - carry) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SBC(oldValueA, valueH, F);
    - name: sbc a, l
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x9D"
      definition: |
        const oldValueA = A;
        const valueL = L;
        const carry = F & 0x01n;
        A = (oldValueA - valueL - carry) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SBC(oldValueA, valueL, F);
    - name: sbc a, (hl)
      template: standard
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x9E"
      definition: |
        const value = CAPI.MEM.read((H << 8n) | L, 1);
        const oldValueA = A;
        const carry = F & 0x01n;
        A = (oldValueA - value - carry) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SBC(oldValueA, value, F);
    - name: sbc a, a
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x9F"
      definition: |
        const carry = F & CAPI.Z80.C_FLAG;
        
        if (carry === 0n) {
            // Operation is A - A - 0. Result is 0.
            A = 0n;
            // Flags: S=0, Z=1, H=0, P/V=0, N=1, C=0
            F = CAPI.Z80.Z_FLAG | CAPI.Z80.N_FLAG; 
        } else {
            // Operation is A - A - 1. Result is -1 (0xFF).
            A = 0xFFn;
            // Flags: S=1, Z=0, H=1, P/V=0, N=1, C=1
            F = CAPI.Z80.S_FLAG | CAPI.Z80.H_FLAG | CAPI.Z80.N_FLAG | CAPI.Z80.C_FLAG;
        }
    - name: and b
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xA0"
      definition: |
        A = A & B;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 1);
    - name: and c
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xA1"
      definition: |
        A = A & C;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 1);
    - name: and d
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xA2"
      definition: |
        A = A & D;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 1);
    - name: and e
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xA3"
      definition: |
        A = A & E;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 1);
    - name: and h
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xA4"
      definition: |
        A = A & H;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 1);
    - name: and l
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xA5"
      definition: |
        A = A & L;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 1);
    - name: and (hl)
      template: standard
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0xA6"
      definition: |
        A = A & CAPI.MEM.read((H << 8n) | L, 1);
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 1);
    - name: and a
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xA7"
      definition: |
        A = A & A;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 1);
    - name: and
      template: standard
      nwords: 2
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0xE6"
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 1
          word: 1
      definition: |
        A = A & n;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 1);
    - name: xor b
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xA8"
      definition: |
        A = A ^ B;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: xor c
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xA9"
      definition: |
        A = A ^ C;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: xor d
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xAA"
      definition: |
        A = A ^ D;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: xor e
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xAB"
      definition: |
        A = A ^ E;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: xor h
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xAC"
      definition: |
        A = A ^ H;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: xor l
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xAD"
      definition: |
        A = A ^ L;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: xor (hl)
      template: standard
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0xAE"
      definition: |
        A = A ^ CAPI.MEM.read((H << 8n) | L, 1);
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: xor a
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xAF"
      definition: |
        A = A ^ A;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: or b
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xB0"
      definition: |
        A = A | B;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: or c
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xB1"
      definition: |
        A = A | C;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: or d
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xB2"
      definition: |
        A = A | D;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: or e
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xB3"
      definition: |
        A = A | E;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: or h
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xB4"
      definition: |
        A = A | H;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: or l
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xB5"
      definition: |
        A = A | L;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: or (hl)
      template: standard
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0xB6"
      definition: |
        A = A | CAPI.MEM.read((H << 8n) | L, 1);
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: or a
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xB7"
      definition: |
        A = A | A;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);
    - name: cp b
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xB8"
      definition: |
        F = CAPI.Z80.calculateFlags_CP(A, B);
    - name: cp c
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xB9"
      definition: |
        F = CAPI.Z80.calculateFlags_CP(A, C);
    - name: cp d
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xBA"
      definition: |
        F = CAPI.Z80.calculateFlags_CP(A, D);
    - name: cp e
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xBB"
      definition: |
        F = CAPI.Z80.calculateFlags_CP(A, E);
    - name: cp h
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xBC"
      definition: |
        F = CAPI.Z80.calculateFlags_CP(A, H);
    - name: cp l
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xBD"
      definition: |
        F = CAPI.Z80.calculateFlags_CP(A, L);
    - name: cp (hl)
      template: standard
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0xBE"
      definition: |
        const value = CAPI.MEM.read((H << 8n) | L, 1);
        F = CAPI.Z80.calculateFlags_CP(A, value);
    - name: cp a
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xBF"
      definition: |
        F = CAPI.Z80.calculateFlags_CP(A, A);
    - name: cp
      template: standard
      nwords: 2
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0xFE"
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 1
          word: 1
      definition: |
        F = CAPI.Z80.calculateFlags_CP(A, n);

    - name: adc
      template: standard
      nwords: 2
      clk_cycles: 2
      fields:
        - field: opcode
          value: "0xCE"
        - field: instructionFormatting
          type: skip
          value: "a,"
          order: 1
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 2
          word: 1
      definition: |
        const oldValueA = A;
        A = (oldValueA + n + (F & 0x01n)) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADC(oldValueA, n, F);

    - name: add
      template: standard
      nwords: 2
      clk_cycles: 2
      fields:
        - field: opcode
          value: "0xC6"
        - field: instructionFormatting
          type: skip
          value: "a,"
          order: 1
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 2
          word: 1
      definition: |
        const oldValue = A;
        A = (oldValue + n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADD(oldValue, n);

    - name: ld
      template: standard
      nwords: 2
      fields:
        - field: opcode
          value: "0x06"
        - field: instructionFormatting
          type: skip
          value: "b,"
          order: 1
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 2
          word: 1
      definition: "B = n;"

    - name: ld
      template: standard
      nwords: 2
      fields:
        - field: opcode
          value: "0x3e"
        - field: instructionFormatting
          type: skip
          value: "a,"
          order: 1
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 2
          word: 1
      definition: "A = n;"

    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x02"
        - field: instructionFormatting
          type: skip
          value: "(bc), a"
          order: 1
      definition: |
        CAPI.MEM.write((B << 8n) | C, 1, A);
  
    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x12"
        - field: instructionFormatting
          type: skip
          value: "(de), a"
          order: 1
      definition: |
        CAPI.MEM.write((D << 8n) | E, 1, A);

    - name: ld
      template: standard
      nwords: 3
      clk_cycles: 16
      fields:
        - field: opcode
          value: "0x22"
        - field: instructionFormatting
          type: skip
          value: "hl"
          order: 2
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          prefix: "("
          suffix: ")"
          order: 1
          word: [2, 1]
      definition: |
        CAPI.MEM.write(nn, 1, L);
        CAPI.MEM.write(nn + 1n, 1, H);

    - name: ld
      template: standard
      nwords: 3
      clk_cycles: 13
      fields:
        - field: opcode
          value: "0x32"
        - field: instructionFormatting
          type: skip
          value: ", a"
          order: 2
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          prefix: "("
          suffix: ")"
          order: 1
          word: [2, 1]
      definition: |
        CAPI.MEM.write(nn, 1, A);

    - name: inc bc
      template: standard
      clk_cycles: 6
      fields:
        - field: opcode
          value: "0x03"
      definition: |
        // Increments 16-bit BC. No flags are affected.
        const value = (((B << 8n) | C) + 1n) & 0xFFFFn;
        B = (value >> 8n) & 0xFFn;
        C = value & 0xFFn;

    - name: inc de
      template: standard
      clk_cycles: 6
      fields:
        - field: opcode
          value: "0x13"
      definition: |
        // Increments 16-bit DE. No flags are affected.
        const value = (((D << 8n) | E) + 1n) & 0xFFFFn;
        D = (value >> 8n) & 0xFFn;
        E = value & 0xFFn;
  
    - name: inc hl
      template: standard
      clk_cycles: 6
      fields:
        - field: opcode
          value: "0x23"
      definition: |
        // Increments 16-bit HL. No flags are affected.
        const value = (((H << 8n) | L) + 1n) & 0xFFFFn;
        H = (value >> 8n) & 0xFFn;
        L = value & 0xFFn;

    - name: inc sp
      template: standard
      clk_cycles: 6
      fields:
        - field: opcode
          value: "0x33"
      definition: |
        // Increments 16-bit SP. No flags are affected.
        SP = (SP + 1n) & 0xFFFFn;

    - name: dec bc
      template: standard
      clk_cycles: 6
      fields:
        - field: opcode
          value: "0x0B"
      definition: |
        // Decrements 16-bit BC. No flags are affected.
        const value = (((B << 8n) | C) - 1n) & 0xFFFFn;
        B = (value >> 8n) & 0xFFn;
        C = value & 0xFFn;

    - name: dec de
      template: standard
      clk_cycles: 6
      fields:
        - field: opcode
          value: "0x1B"
      definition: |
        // Decrements 16-bit DE. No flags are affected.
        const value = (((D << 8n) | E) - 1n) & 0xFFFFn;
        D = (value >> 8n) & 0xFFn;
        E = value & 0xFFn;

    - name: dec hl
      template: standard
      clk_cycles: 6
      fields:
        - field: opcode
          value: "0x2B"
      definition: |
        // Decrements 16-bit HL. No flags are affected.
        const value = (((H << 8n) | L) - 1n) & 0xFFFFn;
        H = (value >> 8n) & 0xFFn;
        L = value & 0xFFn;

    - name: dec sp
      template: standard
      clk_cycles: 6
      fields:
        - field: opcode
          value: "0x3B"
      definition: |
        // Decrements 16-bit SP. No flags are affected.
        SP = (SP - 1n) & 0xFFFFn;

    - name: add
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0x09"
        - field: instructionFormatting
          type: skip
          value: "hl, bc"
          order: 1
      definition: |
        const hlValue = (H << 8n) | L;
        const bcValue = (B << 8n) | C;
        const result = hlValue + bcValue;
        F = CAPI.Z80.calculateFlags_ADD16(hlValue, bcValue, F);
        const resultWord = result & 0xFFFFn;
        H = (resultWord >> 8n) & 0xFFn;
        L = resultWord & 0xFFn;

    - name: add
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0x19"
        - field: instructionFormatting
          type: skip
          value: "hl, de"
          order: 1
      definition: |
        // Adds the value of DE to HL.
        const hlValue = (H << 8n) | L;
        const deValue = (D << 8n) | E;
        F = CAPI.Z80.calculateFlags_ADD16(hlValue, deValue, F);
        const result = (hlValue + deValue) & 0xFFFFn;
        H = (result >> 8n) & 0xFFn;
        L = result & 0xFFn;

    - name: add
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0x29"
        - field: instructionFormatting
          type: skip
          value: "hl, hl"
          order: 1
      definition: |
        const hlValue = (H << 8n) | L;
        const result = hlValue + hlValue;
        F = CAPI.Z80.calculateFlags_ADD16(hlValue, hlValue, F);
        const resultWord = result & 0xFFFFn;
        H = (resultWord >> 8n) & 0xFFn;
        L = resultWord & 0xFFn;

    - name: add
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0x39"
        - field: instructionFormatting
          type: skip
          value: "hl, sp"
          order: 1
      definition: |
        const hlValue = (H << 8n) | L;
        const result = hlValue + SP;
        F = CAPI.Z80.calculateFlags_ADD16(hlValue, SP, F);
        const resultWord = result & 0xFFFFn;
        H = (resultWord >> 8n) & 0xFFn;
        L = resultWord & 0xFFn;

    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x0a"
        - field: instructionFormatting
          type: skip
          value: "a, (bc)"
          order: 1
      definition: |
        A = CAPI.MEM.read((B << 8n) | C, 1);

    - name: ld
      template: standard
      nwords: 1
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x1a"
        - field: instructionFormatting
          type: skip
          value: "a, (de)"
          order: 1
      definition: |
        A = CAPI.MEM.read((D << 8n) | E, 1);

    - name: ld
      template: standard
      nwords: 3
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x2a"
        - field: instructionFormatting
          type: skip
          value: "hl,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          prefix: "("
          suffix: ")"
          order: 2
          word: [2, 1]
      definition: |
        // Loads the value pointed to by nn into HL.
        L = CAPI.MEM.read(nn, 1); // little endian
        H = CAPI.MEM.read(nn + 1n, 1);

    - name: ld
      template: standard
      nwords: 3
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0x3a"
        - field: instructionFormatting
          type: skip
          value: "a,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          prefix: "("
          suffix: ")"
          order: 2
          word: [2, 1]
      definition: |
        // Loads the value pointed to by nn into A.
        const value = CAPI.MEM.read(nn, 1);
        A = value & 0xFFn;

    - name: inc c
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x0c"
      definition: |
        const oldValue = C;
        C = (oldValue + 1n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_INC(oldValue, F);

    - name: inc e
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x1c"
      definition: |
        const oldValue = E;
        E = (oldValue + 1n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_INC(oldValue, F);

    - name: inc l
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x2c"
      definition: |
        const oldValue = L;
        L = (oldValue + 1n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_INC(oldValue, F);

    - name: inc a
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x3c"
      definition: |
        const oldValue = A;
        A = (oldValue + 1n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_INC(oldValue, F);

    - name: dec c
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x0d"
      definition: |
        const oldValue = C;
        C = (oldValue - 1n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_DEC(oldValue, F);

    - name: rrca
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x0F"
      definition: |
        const lsb = A & 0x01n;
        A = (A >> 1n) | (lsb << 7n);
        let newF = F & (CAPI.Z80.S_FLAG | CAPI.Z80.Z_FLAG | CAPI.Z80.PV_FLAG); // Preserve S, Z, P/V
        if (lsb) newF |= CAPI.Z80.C_FLAG; // Set C if bit 0 was 1
        // N and H are reset
        F = newF;
      
    - name: rra
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x1F"
      definition: |
        // The contents of A are rotated right one bit position.
        // Bit 0 is copied to the Carry flag, and the old Carry flag is copied to bit 7.
        const oldCarry = F & CAPI.Z80.C_FLAG;
        const newCarry = A & 0x01n;

        A = ((A >> 1n) | (oldCarry << 7n)) & 0xFFn;

        // Preserve S, Z, P/V. Reset H, N. Set C from bit 0 of original A.
        let newF = F & (CAPI.Z80.S_FLAG | CAPI.Z80.Z_FLAG | CAPI.Z80.PV_FLAG);
        newF |= newCarry; // newCarry is 0n or 1n, which corresponds to C_FLAG value
        F = newF;

    - name: dec e
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x1d"
      definition: |
        const oldValue = E;
        E = (oldValue - 1n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_DEC(oldValue, F);

    - name: dec l
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x2d"
      definition: |
        const oldValue = L;
        L = (oldValue - 1n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_DEC(oldValue, F);

    - name: dec a
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x3d"
      definition: |
        const oldValue = A;
        A = (oldValue - 1n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_DEC(oldValue, F);

    - name: inc b
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x04"
      definition: |
        const oldValue = B;
        B = (oldValue + 1n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_INC(oldValue, F);

    - name: inc d
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x14"
      definition: |
        const oldValue = D;
        D = (oldValue + 1n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_INC(oldValue, F);

    - name: rla
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x17"
      definition: |
        const carry = F & CAPI.Z80.C_FLAG;
        const msb = (A & 0x80n) ? 1n : 0n;
        A = ((A << 1n) | carry) & 0xFFn;
        let newF = F & (CAPI.Z80.S_FLAG | CAPI.Z80.Z_FLAG | CAPI.Z80.PV_FLAG); // Preserve S, Z, P/V
        if (msb) newF |= CAPI.Z80.C_FLAG; // Set C if bit 7 was 1
        // N and H are reset
        F = newF;

    - name: inc h
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x24"
      definition: |
        const oldValue = H;
        H = (oldValue + 1n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_INC(oldValue, F);

    - name: inc (hl)
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0x34"
      definition: |
        const addr = (H << 8n) | L;
        const oldValue = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, (oldValue + 1n) & 0xFFn);
        F = CAPI.Z80.calculateFlags_INC(oldValue, F);
      
    - name: dec b
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x05"
      definition: |
        const oldValue = B;
        B = (oldValue - 1n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_DEC(oldValue, F);

    - name: dec d
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x15"
      definition: |
        const oldValue = D;
        D = (oldValue - 1n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_DEC(oldValue, F);

    - name: dec h
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x25"
      definition: |
        const oldValue = H;
        H = (oldValue - 1n) & 0xFFn;
        F = CAPI.Z80.calculateFlags_DEC(oldValue, F);

    - name: dec (hl)
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0x35"
      definition: |
        const addr = (H << 8n) | L;
        const oldValue = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, (oldValue - 1n) & 0xFFn);
        F = CAPI.Z80.calculateFlags_DEC(oldValue, F);

    - name: ccf
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x3F"
      definition: |
        // Complement Carry Flag.
        const oldCarrySet = (F & CAPI.Z80.C_FLAG) !== 0n;
        // Preserve S, Z, and P/V flags from the original F register.
        let newF = F & (CAPI.Z80.S_FLAG | CAPI.Z80.Z_FLAG | CAPI.Z80.PV_FLAG);

        if (oldCarrySet) {
            // If the old carry was set (1), the H flag is set to 1, and the new carry is reset (0).
            newF |= CAPI.Z80.H_FLAG;
        } else {
            // If the old carry was reset (0), the H flag is reset (0), and the new carry is set (1).
            newF |= CAPI.Z80.C_FLAG;
        }

        // The N flag is reset.
        F = newF;

    - name: or
      template: standard
      nwords: 2
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0xF6"
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 1
          word: 1
      definition: |
        // Performs a bitwise logical OR between the accumulator and the immediate value n.
        A = A | n;
        // H, N, and C flags are reset. S, Z, and P/V are set based on the result.
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);

    - name: ld
      template: ED
      nwords: 4
      fields:
        - field: opcode2
          value: "0x43"
        - field: instructionFormatting
          type: skip
          value: "bc,"
          order: 2
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          prefix: "("
          suffix: ")"
          order: 1
          word: [3, 2]
      definition: |
        // Stores BC into the memory location pointed to by nn.
        CAPI.MEM.write(nn, 1, C);
        CAPI.MEM.write(nn + 1n, 1, B);

    - name: ld
      template: ED
      nwords: 4
      fields:
        - field: opcode2
          value: "0x53"
        - field: instructionFormatting
          type: skip
          value: "de,"
          order: 2
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          prefix: "("
          suffix: ")"
          order: 1
          word: [3, 2]
      definition: |
        // Stores DE into the memory location pointed to by nn.
        CAPI.MEM.write(nn, 1, E);
        CAPI.MEM.write(nn + 1n, 1, D);

    - name: ld
      template: ED
      nwords: 4
      fields:
        - field: opcode2
          value: "0x63"
        - field: instructionFormatting
          type: skip
          value: "de,"
          order: 2
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          prefix: "("
          suffix: ")"
          order: 1
          word: [3, 2]
      definition: |
        // Stores HL into the memory location pointed to by nn.
        CAPI.MEM.write(nn, 1, L);
        CAPI.MEM.write(nn + 1n, 1, H);

    - name: ld
      template: ED
      nwords: 4
      fields:
        - field: opcode2
          value: "0x73"
        - field: instructionFormatting
          type: skip
          value: "sp,"
          order: 2
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          prefix: "("
          suffix: ")"
          order: 1
          word: [3, 2]
      definition: |
        // Stores SP into the memory location pointed to by nn.
        CAPI.MEM.write(nn, 2, SP);

    - name: ld
      template: ED
      nwords: 4
      fields:
        - field: opcode2
          value: "0x4B"
        - field: instructionFormatting
          type: skip
          value: "bc,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          prefix: "("
          suffix: ")"
          order: 2
          word: [3, 2]
      definition: |
        C = CAPI.MEM.read(nn, 1);
        B = CAPI.MEM.read(nn + 1n, 1);

    - name: in
      template: ED
      nwords: 2
      clk_cycles: 12
      fields:
        - field: opcode2
          value: "0x78"
        - field: port
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 1
          word: 1
      definition: |
        // A byte from the port at the 16-bit address contained in the BC register pair is written to A.
        A = CAPI.Z80.read((B << 8n) | C);

    - name: scf
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0x37"
      definition: |
        // Sets Carry flag. Clears N and H. Preserves S, Z, P/V.
        // S(bit 7), Z(bit 6), P/V(bit 2) are preserved.
        // N(bit 1) and H(bit 4) are cleared. C(bit 0) is set.
        const preservedFlags = F & 0xC4n; // Mask for S, Z, P/V
        F = preservedFlags | 0x01n;      // Set C flag

    - name: ld
      template: standard
      nwords: 2
      fields:
        - field: opcode
          value: "0x0E"
        - field: instructionFormatting
          type: skip
          value: "c,"
          order: 1
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 2
          word: 1
      definition: "C = n;"

    - name: ld
      template: standard
      nwords: 2
      fields:
        - field: opcode
          value: "0x16"
        - field: instructionFormatting
          type: skip
          value: "d,"
          order: 1
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 2
          word: 1
      definition: "D = n;"

    - name: ld
      template: standard
      nwords: 2
      fields:
        - field: opcode
          value: "0x1E"
        - field: instructionFormatting
          type: skip
          value: "e,"
          order: 1
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 2
          word: 1
      definition: "E = n;"

    - name: ld
      template: standard
      nwords: 2
      fields:
        - field: opcode
          value: "0x26"
        - field: instructionFormatting
          type: skip
          value: "h,"
          order: 1
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 2
          word: 1
      definition: "H = n;"
    
    - name: ld # (hl), n
      template: standard
      nwords: 2
      clk_cycles: 10
      fields:
        - field: opcode
          value: "0x36"
        - field: instructionFormatting
          type: skip
          value: "(hl),"
          order: 1
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 2
          word: 1
      definition: |
        CAPI.MEM.write((H << 8n) | L, 1, n);

    - name: ld
      template: standard
      nwords: 2
      fields:
        - field: opcode
          value: "0x2E"
        - field: instructionFormatting
          type: skip
          value: "l,"
          order: 1
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 2
          word: 1
      definition: "L = n;"

    - name: ret
      template: standard
      clk_cycles: 11 # 5 if not taken
      fields:
        - field: opcode
          value: "0xC0"
        - field: instructionFormatting
          type: skip
          value: "nz"
          order: 1
      definition: |
        if ((F & CAPI.Z80.Z_FLAG) === 0n) {
            const lsb = CAPI.MEM.read(SP, 1);
            const msb = CAPI.MEM.read(SP + 1n, 1);
            PC = (msb << 8n) | lsb;
            SP = (SP + 2n) & 0xFFFFn;
        }
    - name: pop bc
      template: standard
      clk_cycles: 10
      fields:
        - field: opcode
          value: "0xC1"
      definition: |
        C = CAPI.MEM.read(SP, 1);
        B = CAPI.MEM.read(SP + 1n, 1);
        SP = (SP + 2n) & 0xFFFFn;
    - name: push bc
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0xC5"
      definition: |
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, B);
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, C);

    - name: rst 00h
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0xC7"
      definition: |
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, PC & 0xFFn);
        PC = 0x00n;
    - name: ret
      template: standard
      clk_cycles: 10
      fields:
        - field: opcode
          value: "0xC9"
      definition: |
        const lsb = CAPI.MEM.read(SP, 1);
        const msb = CAPI.MEM.read(SP + 1n, 1);
        PC = (msb << 8n) | lsb;
        SP = (SP + 2n) & 0xFFFFn;
    - name: ret
      template: standard
      clk_cycles: 11 # 5 if not taken
      fields:
        - field: opcode
          value: "0xC8"
        - field: instructionFormatting
          type: skip
          value: "z"
          order: 1
      definition: |
        if ((F & CAPI.Z80.Z_FLAG) !== 0n) {
            const lsb = CAPI.MEM.read(SP, 1);
            const msb = CAPI.MEM.read(SP + 1n, 1);
            PC = (msb << 8n) | lsb;
            SP = (SP + 2n) & 0xFFFFn;
        }
    - name: call # nz
      template: standard
      nwords: 3
      clk_cycles: 17 # 10 if not taken
      fields:
        - field: opcode
          value: "0xC4"
        - field: instructionFormatting
          type: skip
          value: "nz,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        if ((F & CAPI.Z80.Z_FLAG) === 0n) {
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, PC & 0xFFn);
            PC = nn;
        }
    - name: call # z
      template: standard
      nwords: 3
      clk_cycles: 17 # 10 if not taken
      fields:
        - field: opcode
          value: "0xCC"
        - field: instructionFormatting
          type: skip
          value: "z,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        if ((F & CAPI.Z80.Z_FLAG) !== 0n) {
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, PC & 0xFFn);
            PC = nn;
        }
    - name: call
      template: standard
      nwords: 3
      clk_cycles: 17
      fields:
        - field: opcode
          value: "0xCD"
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 1
          word: [2, 1]
      definition: |
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, PC & 0xFFn);
        PC = nn;
    - name: rst 08h
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0xCF"
      definition: |
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, PC & 0xFFn);
        PC = 0x08n;
    - name: ret nc
      template: standard
      clk_cycles: 11 # 5 if not taken
      fields:
        - field: opcode
          value: "0xD0"
      definition: |
        if ((F & CAPI.Z80.C_FLAG) === 0n) {
            const lsb = CAPI.MEM.read(SP, 1);
            const msb = CAPI.MEM.read(SP + 1n, 1);
            PC = (msb << 8n) | lsb;
            SP = (SP + 2n) & 0xFFFFn;
        }
    - name: pop de
      template: standard
      clk_cycles: 10
      fields:
        - field: opcode
          value: "0xD1"
      definition: |
        E = CAPI.MEM.read(SP, 1);
        D = CAPI.MEM.read(SP + 1n, 1);
        SP = (SP + 2n) & 0xFFFFn;
    - name: call # nc,
      template: standard
      nwords: 3
      clk_cycles: 17 # 10 if not taken
      fields:
        - field: opcode
          value: "0xD4"
        - field: instructionFormatting
          type: skip
          value: "nc,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        if ((F & CAPI.Z80.C_FLAG) === 0n) {
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, PC & 0xFFn);
            PC = nn;
        }
    - name: push de
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0xD5"
      definition: |
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, D);
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, E);
    - name: ret c
      template: standard
      clk_cycles: 11 # 5 if not taken
      fields:
        - field: opcode
          value: "0xD8"
      definition: |
        if ((F & CAPI.Z80.C_FLAG) !== 0n) {
            const lsb = CAPI.MEM.read(SP, 1);
            const msb = CAPI.MEM.read(SP + 1n, 1);
            PC = (msb << 8n) | lsb;
            SP = (SP + 2n) & 0xFFFFn;
        }
    - name: call # c,
      template: standard
      nwords: 3
      clk_cycles: 17 # 10 if not taken
      fields:
        - field: opcode
          value: "0xDC"
        - field: instructionFormatting
          type: skip
          value: "c,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        if ((F & CAPI.Z80.C_FLAG) !== 0n) {
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, PC & 0xFFn);
            PC = nn;
        }

    - name: exx
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xD9"
      definition: |
        // Exchanges the contents of the BC, DE, and HL register pairs 
        // with the contents of BC', DE', and HL'.
        // to variables with a "_prime" suffix (e.g., B_prime).
        let temp_reg;
        temp_reg = B;
        B = B_prime;
        B_prime = temp_reg;

        temp_reg = C;
        C = C_prime;
        C_prime = temp_reg;

        temp_reg = D;
        D = D_prime;
        D_prime = temp_reg;

        temp_reg = E;
        E = E_prime;
        E_prime = temp_reg;

        temp_reg = H;
        H = H_prime;
        H_prime = temp_reg;

        temp_reg = L;
        L = L_prime;
        L_prime = temp_reg;
      
    - name: rst 18h
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0xDF"
      definition: |
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, PC & 0xFFn);
        PC = 0x18n;
    - name: ret po
      template: standard
      clk_cycles: 11 # 5 if not taken
      fields:
        - field: opcode
          value: "0xE0"
      definition: |
        if ((F & CAPI.Z80.PV_FLAG) === 0n) {
            const lsb = CAPI.MEM.read(SP, 1);
            const msb = CAPI.MEM.read(SP + 1n, 1);
            PC = (msb << 8n) | lsb;
            SP = (SP + 2n) & 0xFFFFn;
        }
    - name: pop hl
      template: standard
      clk_cycles: 10
      fields:
        - field: opcode
          value: "0xE1"
      definition: |
        L = CAPI.MEM.read(SP, 1);
        H = CAPI.MEM.read(SP + 1n, 1);
        SP = (SP + 2n) & 0xFFFFn;
    - name: call # po,
      template: standard
      nwords: 3
      clk_cycles: 17 # 10 if not taken
      fields:
        - field: opcode
          value: "0xE4"
        - field: instructionFormatting
          type: skip
          value: "po,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        if ((F & CAPI.Z80.PV_FLAG) === 0n) {
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, PC & 0xFFn);
            PC = nn;
        }
    - name: push hl
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0xE5"
      definition: |
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, H);
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, L);
    - name: ret pe
      template: standard
      clk_cycles: 11 # 5 if not taken
      fields:
        - field: opcode
          value: "0xE8"
      definition: |
        if ((F & CAPI.Z80.PV_FLAG) !== 0n) {
            const lsb = CAPI.MEM.read(SP, 1);
            const msb = CAPI.MEM.read(SP + 1n, 1);
            PC = (msb << 8n) | lsb;
            SP = (SP + 2n) & 0xFFFFn;
        }
    - name: call # pe,
      template: standard
      nwords: 3
      clk_cycles: 17 # 10 if not taken
      fields:
        - field: opcode
          value: "0xEC"
        - field: instructionFormatting
          type: skip
          value: "pe,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        if ((F & CAPI.Z80.PV_FLAG) !== 0n) {
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, PC & 0xFFn);
            PC = nn;
        }

    - name: xor
      template: standard
      nwords: 2
      clk_cycles: 7
      fields:
        - field: opcode
          value: "0xEE"
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 1
          word: 1
      definition: |
        // Performs a bitwise logical XOR between the accumulator and the immediate value n.
        A = A ^ n;
        // H, N, and C flags are reset. S, Z, and P/V are set based on the result.
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);

    - name: rst 28h
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0xEF"
      definition: |
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, PC & 0xFFn);
        PC = 0x28n;
    - name: ret p
      template: standard
      clk_cycles: 11 # 5 if not taken
      fields:
        - field: opcode
          value: "0xF0"
      definition: |
        if ((F & CAPI.Z80.S_FLAG) === 0n) {
            const lsb = CAPI.MEM.read(SP, 1);
            const msb = CAPI.MEM.read(SP + 1n, 1);
            PC = (msb << 8n) | lsb;
            SP = (SP + 2n) & 0xFFFFn;
        }
    - name: pop af
      template: standard
      clk_cycles: 10
      fields:
        - field: opcode
          value: "0xF1"
      definition: |
        F = CAPI.MEM.read(SP, 1);
        A = CAPI.MEM.read(SP + 1n, 1);
        SP = (SP + 2n) & 0xFFFFn;
    - name: call # p,
      template: standard
      nwords: 3
      clk_cycles: 17 # 10 if not taken
      fields:
        - field: opcode
          value: "0xF4"
        - field: instructionFormatting
          type: skip
          value: "p,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        if ((F & CAPI.Z80.S_FLAG) === 0n) {
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, PC & 0xFFn);
            PC = nn;
        }
    - name: push af
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0xF5"
      definition: |
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, A);
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, F);
    - name: ei
      template: standard
      nwords: 1
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xFB"
      definition: |
        IFF1 = 1n;
        IFF2 = 1n;
    - name: ret m
      template: standard
      clk_cycles: 11 # 5 if not taken
      fields:
        - field: opcode
          value: "0xF8"
      definition: |
        if ((F & CAPI.Z80.S_FLAG) !== 0n) {
            const lsb = CAPI.MEM.read(SP, 1);
            const msb = CAPI.MEM.read(SP + 1n, 1);
            PC = (msb << 8n) | lsb;
            SP = (SP + 2n) & 0xFFFFn;
        }
    - name: ld sp, hl
      template: standard
      clk_cycles: 6
      fields:
        - field: opcode
          value: "0xF9"
      definition: |
        SP = (H << 8n) | L;
    - name: call # m,
      template: standard
      nwords: 3
      clk_cycles: 17 # 10 if not taken
      fields:
        - field: opcode
          value: "0xFC"
        - field: instructionFormatting
          type: skip
          value: "m,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [2, 1]
      definition: |
        if ((F & CAPI.Z80.S_FLAG) !== 0n) {
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
            SP = (SP - 1n) & 0xFFFFn;
            CAPI.MEM.write(SP, 1, PC & 0xFFn);
            PC = nn;
        }
    - name: di
      template: standard
      clk_cycles: 4
      fields:
        - field: opcode
          value: "0xF3"
      definition: |
        IFF1 = 0n;
        IFF2 = 0n;
        
    - name: rst 38h
      template: standard
      clk_cycles: 11
      fields:
        - field: opcode
          value: "0xFF"
      definition: |
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, (PC >> 8n) & 0xFFn);
        SP = (SP - 1n) & 0xFFFFn;
        CAPI.MEM.write(SP, 1, PC & 0xFFn);
        PC = 0x38n;

    # RLC r
    - name: rlc
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x00"
        - field: instructionFormatting
          type: skip
          value: "b"
          order: 1
      definition: |
        const msb = (B & 0x80n) >> 7n;
        B = ((B << 1n) | msb) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ROTATE(B, msb);

    - name: rlc
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x01"
        - field: instructionFormatting
          type: skip
          value: "c"
          order: 1
      definition: |
        const msb = (C & 0x80n) >> 7n;
        C = ((C << 1n) | msb) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ROTATE(C, msb);

    - name: rlc
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x02"
        - field: instructionFormatting
          type: skip
          value: "d"
          order: 1
      definition: |
        const msb = (D & 0x80n) >> 7n;
        D = ((D << 1n) | msb) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ROTATE(D, msb);

    - name: rlc
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x03"
        - field: instructionFormatting
          type: skip
          value: "e"
          order: 1
      definition: |
        const msb = (E & 0x80n) >> 7n;
        E = ((E << 1n) | msb) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ROTATE(E, msb);

    - name: rlc
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x04"
        - field: instructionFormatting
          type: skip
          value: "h"
          order: 1
      definition: |
        const msb = (H & 0x80n) >> 7n;
        H = ((H << 1n) | msb) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ROTATE(H, msb);

    - name: rlc
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x05"
        - field: instructionFormatting
          type: skip
          value: "l"
          order: 1
      definition: |
        const msb = (L & 0x80n) >> 7n;
        L = ((L << 1n) | msb) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ROTATE(L, msb);
        
    - name: rlc
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x07"
        - field: instructionFormatting
          type: skip
          value: "a"
          order: 1
      definition: |
        const msb = (A & 0x80n) >> 7n;
        A = ((A << 1n) | msb) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ROTATE(A, msb);

    # RLC (HL)
    - name: rlc
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0x06"
        - field: instructionFormatting
          type: skip
          value: "(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        const msb = (value & 0x80n) >> 7n;
        const result = ((value << 1n) | msb) & 0xFFn;
        CAPI.MEM.write(addr, 1, result);
        F = CAPI.Z80.calculateFlags_ROTATE(result, msb);

    # SRL r
    - name: srl
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x38"
        - field: instructionFormatting
          type: skip
          value: "b"
          order: 1
      definition: |
        const lsb = B & 0x01n;
        B = B >> 1n;
        F = CAPI.Z80.calculateFlags_SRL(B, lsb);

    - name: srl
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x39"
        - field: instructionFormatting
          type: skip
          value: "c"
          order: 1
      definition: |
        const lsb = C & 0x01n;
        C = C >> 1n;
        F = CAPI.Z80.calculateFlags_SRL(C, lsb);

    - name: srl
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x3A"
        - field: instructionFormatting
          type: skip
          value: "d"
          order: 1
      definition: |
        const lsb = D & 0x01n;
        D = D >> 1n;
        F = CAPI.Z80.calculateFlags_SRL(D, lsb);

    - name: srl
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x3B"
        - field: instructionFormatting
          type: skip
          value: "e"
          order: 1
      definition: |
        const lsb = E & 0x01n;
        E = E >> 1n;
        F = CAPI.Z80.calculateFlags_SRL(E, lsb);

    - name: srl
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x3C"
        - field: instructionFormatting
          type: skip
          value: "h"
          order: 1
      definition: |
        const lsb = H & 0x01n;
        H = H >> 1n;
        F = CAPI.Z80.calculateFlags_SRL(H, lsb);

    - name: srl
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x3D"
        - field: instructionFormatting
          type: skip
          value: "l"
          order: 1
      definition: |
        const lsb = L & 0x01n;
        L = L >> 1n;
        F = CAPI.Z80.calculateFlags_SRL(L, lsb);

    - name: srl
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x3F"
        - field: instructionFormatting
          type: skip
          value: "a"
          order: 1
      definition: |
        const lsb = A & 0x01n;
        A = A >> 1n;
        F = CAPI.Z80.calculateFlags_SRL(A, lsb);

    # SRL (HL)
    - name: srl
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0x3E"
        - field: instructionFormatting
          type: skip
          value: "(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        const lsb = value & 0x01n;
        const result = value >> 1n;
        CAPI.MEM.write(addr, 1, result);
        F = CAPI.Z80.calculateFlags_SRL(result, lsb);

    - name: ld
      template: DD
      clk_cycles: 14
      nwords: 4
      fields:
        - field: opcode2
          value: "0x21"
        - field: instructionFormatting
          type: skip
          value: "ix,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [3, 2]
      definition: |
        // Loads nn into register IX.
        IX = nn;

    - name: add
      template: DD
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0x09"
        - field: instructionFormatting
          type: skip
          value: "ix, bc"
          order: 1
      definition: |
        // The value of BC is added to IX.
        const value = (((B << 8n) | C) - 1n) & 0xFFFFn;
        F = CAPI.Z80.calculateFlags_ADD16(IX, value, F);
        IX = (IX + value) & 0xFFFFn;

    - name: add
      template: DD
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0x29"
        - field: instructionFormatting
          type: skip
          value: "ix, ix"
          order: 1
      definition: |
        // The value of IX is added to IX.
        let prevIX = IX;
        IX = (IX + IX) & 0xFFFFn;
        F = CAPI.Z80.calculateFlags_ADD16(prevIX, prevIX, F)

    - name: jp
      template: DD
      nwords: 2
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xE9"
        - field: instructionFormatting
          type: skip
          value: "(ix)"
          order: 1
      definition: |
        PC = IX;

    # SRL (IX+d)
    - name: srl
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0x3E"
        - field: imm
          order: 2
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        const lsb = value & 0x01n;
        const result = value >> 1n;
        CAPI.MEM.write(addr, 1, result);
        F = CAPI.Z80.calculateFlags_SRL(result, lsb);

    # SRL (IY+d)
    - name: srl
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0x3E"
        - field: d
          order: 2
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        const lsb = value & 0x01n;
        const result = value >> 1n;
        CAPI.MEM.write(addr, 1, result);
        F = CAPI.Z80.calculateFlags_SRL(result, lsb);

    # BIT b, r instructions
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x40"
        - field: instructionFormatting
          type: skip
          value: "0,b"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(B, 0, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x41"
        - field: instructionFormatting
          type: skip
          value: "0,c"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(C, 0, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x42"
        - field: instructionFormatting
          type: skip
          value: "0,d"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(D, 0, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x43"
        - field: instructionFormatting
          type: skip
          value: "0,e"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(E, 0, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x44"
        - field: instructionFormatting
          type: skip
          value: "0,h"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(H, 0, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x45"
        - field: instructionFormatting
          type: skip
          value: "0,l"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(L, 0, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x47"
        - field: instructionFormatting
          type: skip
          value: "0,a"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(A, 0, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x48"
        - field: instructionFormatting
          type: skip
          value: "1,b"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(B, 1, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x49"
        - field: instructionFormatting
          type: skip
          value: "1,c"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(C, 1, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x4A"
        - field: instructionFormatting
          type: skip
          value: "1,d"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(D, 1, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x4B"
        - field: instructionFormatting
          type: skip
          value: "1,e"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(E, 1, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x4C"
        - field: instructionFormatting
          type: skip
          value: "1,h"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(H, 1, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x4D"
        - field: instructionFormatting
          type: skip
          value: "1,l"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(L, 1, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x4F"
        - field: instructionFormatting
          type: skip
          value: "1,a"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(A, 1, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x50"
        - field: instructionFormatting
          type: skip
          value: "2,b"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(B, 2, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x51"
        - field: instructionFormatting
          type: skip
          value: "2,c"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(C, 2, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x52"
        - field: instructionFormatting
          type: skip
          value: "2,d"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(D, 2, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x53"
        - field: instructionFormatting
          type: skip
          value: "2,e"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(E, 2, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x54"
        - field: instructionFormatting
          type: skip
          value: "2,h"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(H, 2, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x55"
        - field: instructionFormatting
          type: skip
          value: "2,l"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(L, 2, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x57"
        - field: instructionFormatting
          type: skip
          value: "2,a"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(A, 2, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x58"
        - field: instructionFormatting
          type: skip
          value: "3,b"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(B, 3, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x59"
        - field: instructionFormatting
          type: skip
          value: "3,c"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(C, 3, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x5A"
        - field: instructionFormatting
          type: skip
          value: "3,d"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(D, 3, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x5B"
        - field: instructionFormatting
          type: skip
          value: "3,e"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(E, 3, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x5C"
        - field: instructionFormatting
          type: skip
          value: "3,h"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(H, 3, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x5D"
        - field: instructionFormatting
          type: skip
          value: "3,l"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(L, 3, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x5F"
        - field: instructionFormatting
          type: skip
          value: "3,a"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(A, 3, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x60"
        - field: instructionFormatting
          type: skip
          value: "4,b"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(B, 4, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x61"
        - field: instructionFormatting
          type: skip
          value: "4,c"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(C, 4, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x62"
        - field: instructionFormatting
          type: skip
          value: "4,d"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(D, 4, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x63"
        - field: instructionFormatting
          type: skip
          value: "4,e"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(E, 4, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x64"
        - field: instructionFormatting
          type: skip
          value: "4,h"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(H, 4, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x65"
        - field: instructionFormatting
          type: skip
          value: "4,l"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(L, 4, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x67"
        - field: instructionFormatting
          type: skip
          value: "4,a"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(A, 4, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x68"
        - field: instructionFormatting
          type: skip
          value: "5,b"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(B, 5, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x69"
        - field: instructionFormatting
          type: skip
          value: "5,c"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(C, 5, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x6A"
        - field: instructionFormatting
          type: skip
          value: "5,d"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(D, 5, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x6B"
        - field: instructionFormatting
          type: skip
          value: "5,e"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(E, 5, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x6C"
        - field: instructionFormatting
          type: skip
          value: "5,h"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(H, 5, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x6D"
        - field: instructionFormatting
          type: skip
          value: "5,l"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(L, 5, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x6F"
        - field: instructionFormatting
          type: skip
          value: "5,a"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(A, 5, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x70"
        - field: instructionFormatting
          type: skip
          value: "6,b"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(B, 6, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x71"
        - field: instructionFormatting
          type: skip
          value: "6,c"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(C, 6, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x72"
        - field: instructionFormatting
          type: skip
          value: "6,d"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(D, 6, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x73"
        - field: instructionFormatting
          type: skip
          value: "6,e"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(E, 6, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x74"
        - field: instructionFormatting
          type: skip
          value: "6,h"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(H, 6, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x75"
        - field: instructionFormatting
          type: skip
          value: "6,l"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(L, 6, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x77"
        - field: instructionFormatting
          type: skip
          value: "6,a"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(A, 6, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x78"
        - field: instructionFormatting
          type: skip
          value: "7,b"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(B, 7, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x79"
        - field: instructionFormatting
          type: skip
          value: "7,c"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(C, 7, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x7A"
        - field: instructionFormatting
          type: skip
          value: "7,d"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(D, 7, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x7B"
        - field: instructionFormatting
          type: skip
          value: "7,e"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(E, 7, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x7C"
        - field: instructionFormatting
          type: skip
          value: "7,h"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(H, 7, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x7D"
        - field: instructionFormatting
          type: skip
          value: "7,l"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(L, 7, F);
    - name: bit
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x7F"
        - field: instructionFormatting
          type: skip
          value: "7,a"
          order: 1
      definition: F = CAPI.Z80.calculateFlags_BIT(A, 7, F);
      
    # BIT b, (HL)
    - name: bit
      template: CB
      clk_cycles: 12
      fields:
        - field: opcode2
          value: "0x46"
        - field: instructionFormatting
          type: skip
          value: "0,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 0, F);
    - name: bit
      template: CB
      clk_cycles: 12
      fields:
        - field: opcode2
          value: "0x4E"
        - field: instructionFormatting
          type: skip
          value: "1,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 1, F);
    - name: bit
      template: CB
      clk_cycles: 12
      fields:
        - field: opcode2
          value: "0x56"
        - field: instructionFormatting
          type: skip
          value: "2,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 2, F);
    - name: bit
      template: CB
      clk_cycles: 12
      fields:
        - field: opcode2
          value: "0x5E"
        - field: instructionFormatting
          type: skip
          value: "3,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 3, F);
    - name: bit
      template: CB
      clk_cycles: 12
      fields:
        - field: opcode2
          value: "0x66"
        - field: instructionFormatting
          type: skip
          value: "4,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 4, F);
    - name: bit
      template: CB
      clk_cycles: 12
      fields:
        - field: opcode2
          value: "0x6E"
        - field: instructionFormatting
          type: skip
          value: "5,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 5, F);
    - name: bit
      template: CB
      clk_cycles: 12
      fields:
        - field: opcode2
          value: "0x76"
        - field: instructionFormatting
          type: skip
          value: "6,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 6, F);
    - name: bit
      template: CB
      clk_cycles: 12
      fields:
        - field: opcode2
          value: "0x7E"
        - field: instructionFormatting
          type: skip
          value: "7,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 7, F);
    
    # SET b, (HL)
    - name: set
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0xC6"
        - field: instructionFormatting
          type: skip
          value: "0,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x01n);
    - name: set
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0xCE"
        - field: instructionFormatting
          type: skip
          value: "1,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x02n);
    - name: set
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0xD6"
        - field: instructionFormatting
          type: skip
          value: "2,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x04n);
    - name: set
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0xDE"
        - field: instructionFormatting
          type: skip
          value: "3,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x08n);
    - name: set
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0xE6"
        - field: instructionFormatting
          type: skip
          value: "4,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x10n);
    - name: set
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0xEE"
        - field: instructionFormatting
          type: skip
          value: "5,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x20n);
    - name: set
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0xF6"
        - field: instructionFormatting
          type: skip
          value: "6,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x40n);
    - name: set
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0xFE"
        - field: instructionFormatting
          type: skip
          value: "7,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x80n);

    # RES b, (HL)
    - name: res
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0x86"
        - field: instructionFormatting
          type: skip
          value: "0,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x01n);
    - name: res
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0x8E"
        - field: instructionFormatting
          type: skip
          value: "1,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x02n);
    - name: res
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0x96"
        - field: instructionFormatting
          type: skip
          value: "2,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x04n);
    - name: res
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0x9E"
        - field: instructionFormatting
          type: skip
          value: "3,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x08n);
    - name: res
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0xA6"
        - field: instructionFormatting
          type: skip
          value: "4,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x10n);
    - name: res
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0xAE"
        - field: instructionFormatting
          type: skip
          value: "5,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x20n);
    - name: res
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0xB6"
        - field: instructionFormatting
          type: skip
          value: "6,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x40n);
    - name: res
      template: CB
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0xBE"
        - field: instructionFormatting
          type: skip
          value: "7,(hl)"
          order: 1
      definition: |
        const addr = (H << 8n) | L;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x80n);

    # BIT b, (IX+d)
    - name: bit
      template: DDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x46"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "0,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 0, F);
    - name: bit
      template: DDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x4E"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "1,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 1, F);
    - name: bit
      template: DDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x56"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "2,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 2, F);
    - name: bit
      template: DDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x5E"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "3,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 3, F);
    - name: bit
      template: DDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x66"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "4,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 4, F);
    - name: bit
      template: DDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x6E"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "5,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 5, F);
    - name: bit
      template: DDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x76"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "6,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 6, F);
    - name: bit
      template: DDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x7E"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "7,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 7, F);

    # BIT b, (IY+d)
    - name: bit
      template: FDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x46"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "0,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 0, F);
    - name: bit
      template: FDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x4E"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "1,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 1, F);
    - name: bit
      template: FDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x56"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "2,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 2, F);
    - name: bit
      template: FDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x5E"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "3,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 3, F);
    - name: bit
      template: FDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x66"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "4,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 4, F);
    - name: bit
      template: FDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x6E"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "5,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 5, F);
    - name: bit
      template: FDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x76"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "6,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 6, F);
    - name: bit
      template: FDCB
      clk_cycles: 20
      fields:
        - field: opcode3
          value: "0x7E"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "7,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        F = CAPI.Z80.calculateFlags_BIT(value, 7, F);

    # SET b, (IX+d)
    - name: set
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xC6"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "0,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x01n);
    - name: set
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xCE"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "1,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x02n);
    - name: set
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xD6"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "2,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x04n);
    - name: set
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xDE"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "3,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x08n);
    - name: set
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xE6"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "4,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x10n);
    - name: set
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xEE"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "5,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x20n);
    - name: set
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xF6"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "6,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x40n);
    - name: set
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xFE"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "7,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x80n);

    # RES b, (IX+d)
    - name: res
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0x86"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "0,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x01n);
    - name: res
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0x8E"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "1,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x02n);
    - name: res
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0x96"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "2,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x04n);
    - name: res
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0x9E"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "3,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x08n);
    - name: res
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xA6"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "4,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x10n);
    - name: res
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xAE"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "5,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x20n);
    - name: res
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xB6"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "6,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x40n);
    - name: res
      template: DDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xBE"
        - field: imm
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "7,(ix+"
          order: 1
      definition: |
        const addr = (IX + imm) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x80n);
        
    # SET b, r
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xC0"
        - field: instructionFormatting
          type: skip
          value: "0,b"
          order: 1
      definition: B |= 0x01n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xC1"
        - field: instructionFormatting
          type: skip
          value: "0,c"
          order: 1
      definition: C |= 0x01n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xC2"
        - field: instructionFormatting
          type: skip
          value: "0,d"
          order: 1
      definition: D |= 0x01n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xC3"
        - field: instructionFormatting
          type: skip
          value: "0,e"
          order: 1
      definition: E |= 0x01n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xC4"
        - field: instructionFormatting
          type: skip
          value: "0,h"
          order: 1
      definition: H |= 0x01n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xC5"
        - field: instructionFormatting
          type: skip
          value: "0,l"
          order: 1
      definition: L |= 0x01n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xC7"
        - field: instructionFormatting
          type: skip
          value: "0,a"
          order: 1
      definition: A |= 0x01n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xC8"
        - field: instructionFormatting
          type: skip
          value: "1,b"
          order: 1
      definition: B |= 0x02n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xC9"
        - field: instructionFormatting
          type: skip
          value: "1,c"
          order: 1
      definition: C |= 0x02n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xCA"
        - field: instructionFormatting
          type: skip
          value: "1,d"
          order: 1
      definition: D |= 0x02n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xCB"
        - field: instructionFormatting
          type: skip
          value: "1,e"
          order: 1
      definition: E |= 0x02n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xCC"
        - field: instructionFormatting
          type: skip
          value: "1,h"
          order: 1
      definition: H |= 0x02n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xCD"
        - field: instructionFormatting
          type: skip
          value: "1,l"
          order: 1
      definition: L |= 0x02n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xCF"
        - field: instructionFormatting
          type: skip
          value: "1,a"
          order: 1
      definition: A |= 0x02n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xD0"
        - field: instructionFormatting
          type: skip
          value: "2,b"
          order: 1
      definition: B |= 0x04n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xD1"
        - field: instructionFormatting
          type: skip
          value: "2,c"
          order: 1
      definition: C |= 0x04n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xD2"
        - field: instructionFormatting
          type: skip
          value: "2,d"
          order: 1
      definition: D |= 0x04n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xD3"
        - field: instructionFormatting
          type: skip
          value: "2,e"
          order: 1
      definition: E |= 0x04n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xD4"
        - field: instructionFormatting
          type: skip
          value: "2,h"
          order: 1
      definition: H |= 0x04n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xD5"
        - field: instructionFormatting
          type: skip
          value: "2,l"
          order: 1
      definition: L |= 0x04n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xD7"
        - field: instructionFormatting
          type: skip
          value: "2,a"
          order: 1
      definition: A |= 0x04n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xD8"
        - field: instructionFormatting
          type: skip
          value: "3,b"
          order: 1
      definition: B |= 0x08n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xD9"
        - field: instructionFormatting
          type: skip
          value: "3,c"
          order: 1
      definition: C |= 0x08n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xDA"
        - field: instructionFormatting
          type: skip
          value: "3,d"
          order: 1
      definition: D |= 0x08n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xDB"
        - field: instructionFormatting
          type: skip
          value: "3,e"
          order: 1
      definition: E |= 0x08n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xDC"
        - field: instructionFormatting
          type: skip
          value: "3,h"
          order: 1
      definition: H |= 0x08n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xDD"
        - field: instructionFormatting
          type: skip
          value: "3,l"
          order: 1
      definition: L |= 0x08n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xDF"
        - field: instructionFormatting
          type: skip
          value: "3,a"
          order: 1
      definition: A |= 0x08n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xE0"
        - field: instructionFormatting
          type: skip
          value: "4,b"
          order: 1
      definition: B |= 0x10n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xE1"
        - field: instructionFormatting
          type: skip
          value: "4,c"
          order: 1
      definition: C |= 0x10n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xE2"
        - field: instructionFormatting
          type: skip
          value: "4,d"
          order: 1
      definition: D |= 0x10n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xE3"
        - field: instructionFormatting
          type: skip
          value: "4,e"
          order: 1
      definition: E |= 0x10n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xE4"
        - field: instructionFormatting
          type: skip
          value: "4,h"
          order: 1
      definition: H |= 0x10n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xE5"
        - field: instructionFormatting
          type: skip
          value: "4,l"
          order: 1
      definition: L |= 0x10n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xE7"
        - field: instructionFormatting
          type: skip
          value: "4,a"
          order: 1
      definition: A |= 0x10n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xE8"
        - field: instructionFormatting
          type: skip
          value: "5,b"
          order: 1
      definition: B |= 0x20n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xE9"
        - field: instructionFormatting
          type: skip
          value: "5,c"
          order: 1
      definition: C |= 0x20n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xEA"
        - field: instructionFormatting
          type: skip
          value: "5,d"
          order: 1
      definition: D |= 0x20n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xEB"
        - field: instructionFormatting
          type: skip
          value: "5,e"
          order: 1
      definition: E |= 0x20n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xEC"
        - field: instructionFormatting
          type: skip
          value: "5,h"
          order: 1
      definition: H |= 0x20n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xED"
        - field: instructionFormatting
          type: skip
          value: "5,l"
          order: 1
      definition: L |= 0x20n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xEF"
        - field: instructionFormatting
          type: skip
          value: "5,a"
          order: 1
      definition: A |= 0x20n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xF0"
        - field: instructionFormatting
          type: skip
          value: "6,b"
          order: 1
      definition: B |= 0x40n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xF1"
        - field: instructionFormatting
          type: skip
          value: "6,c"
          order: 1
      definition: C |= 0x40n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xF2"
        - field: instructionFormatting
          type: skip
          value: "6,d"
          order: 1
      definition: D |= 0x40n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xF3"
        - field: instructionFormatting
          type: skip
          value: "6,e"
          order: 1
      definition: E |= 0x40n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xF4"
        - field: instructionFormatting
          type: skip
          value: "6,h"
          order: 1
      definition: H |= 0x40n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xF5"
        - field: instructionFormatting
          type: skip
          value: "6,l"
          order: 1
      definition: L |= 0x40n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xF7"
        - field: instructionFormatting
          type: skip
          value: "6,a"
          order: 1
      definition: A |= 0x40n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xF8"
        - field: instructionFormatting
          type: skip
          value: "7,b"
          order: 1
      definition: B |= 0x80n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xF9"
        - field: instructionFormatting
          type: skip
          value: "7,c"
          order: 1
      definition: C |= 0x80n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xFA"
        - field: instructionFormatting
          type: skip
          value: "7,d"
          order: 1
      definition: D |= 0x80n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xFB"
        - field: instructionFormatting
          type: skip
          value: "7,e"
          order: 1
      definition: E |= 0x80n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xFC"
        - field: instructionFormatting
          type: skip
          value: "7,h"
          order: 1
      definition: H |= 0x80n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xFD"
        - field: instructionFormatting
          type: skip
          value: "7,l"
          order: 1
      definition: L |= 0x80n;
    - name: set
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xFF"
        - field: instructionFormatting
          type: skip
          value: "7,a"
          order: 1
      definition: A |= 0x80n;

    # RES b, r
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x80"
        - field: instructionFormatting
          type: skip
          value: "0,b"
          order: 1
      definition: B &= ~0x01n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x81"
        - field: instructionFormatting
          type: skip
          value: "0,c"
          order: 1
      definition: C &= ~0x01n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x82"
        - field: instructionFormatting
          type: skip
          value: "0,d"
          order: 1
      definition: D &= ~0x01n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x83"
        - field: instructionFormatting
          type: skip
          value: "0,e"
          order: 1
      definition: E &= ~0x01n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x84"
        - field: instructionFormatting
          type: skip
          value: "0,h"
          order: 1
      definition: H &= ~0x01n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x85"
        - field: instructionFormatting
          type: skip
          value: "0,l"
          order: 1
      definition: L &= ~0x01n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x87"
        - field: instructionFormatting
          type: skip
          value: "0,a"
          order: 1
      definition: A &= ~0x01n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x88"
        - field: instructionFormatting
          type: skip
          value: "1,b"
          order: 1
      definition: B &= ~0x02n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x89"
        - field: instructionFormatting
          type: skip
          value: "1,c"
          order: 1
      definition: C &= ~0x02n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x8A"
        - field: instructionFormatting
          type: skip
          value: "1,d"
          order: 1
      definition: D &= ~0x02n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x8B"
        - field: instructionFormatting
          type: skip
          value: "1,e"
          order: 1
      definition: E &= ~0x02n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x8C"
        - field: instructionFormatting
          type: skip
          value: "1,h"
          order: 1
      definition: H &= ~0x02n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x8D"
        - field: instructionFormatting
          type: skip
          value: "1,l"
          order: 1
      definition: L &= ~0x02n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x8F"
        - field: instructionFormatting
          type: skip
          value: "1,a"
          order: 1
      definition: A &= ~0x02n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x90"
        - field: instructionFormatting
          type: skip
          value: "2,b"
          order: 1
      definition: B &= ~0x04n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x91"
        - field: instructionFormatting
          type: skip
          value: "2,c"
          order: 1
      definition: C &= ~0x04n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x92"
        - field: instructionFormatting
          type: skip
          value: "2,d"
          order: 1
      definition: D &= ~0x04n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x93"
        - field: instructionFormatting
          type: skip
          value: "2,e"
          order: 1
      definition: E &= ~0x04n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x94"
        - field: instructionFormatting
          type: skip
          value: "2,h"
          order: 1
      definition: H &= ~0x04n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x95"
        - field: instructionFormatting
          type: skip
          value: "2,l"
          order: 1
      definition: L &= ~0x04n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x97"
        - field: instructionFormatting
          type: skip
          value: "2,a"
          order: 1
      definition: A &= ~0x04n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x98"
        - field: instructionFormatting
          type: skip
          value: "3,b"
          order: 1
      definition: B &= ~0x08n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x99"
        - field: instructionFormatting
          type: skip
          value: "3,c"
          order: 1
      definition: C &= ~0x08n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x9A"
        - field: instructionFormatting
          type: skip
          value: "3,d"
          order: 1
      definition: D &= ~0x08n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x9B"
        - field: instructionFormatting
          type: skip
          value: "3,e"
          order: 1
      definition: E &= ~0x08n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x9C"
        - field: instructionFormatting
          type: skip
          value: "3,h"
          order: 1
      definition: H &= ~0x08n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x9D"
        - field: instructionFormatting
          type: skip
          value: "3,l"
          order: 1
      definition: L &= ~0x08n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x9F"
        - field: instructionFormatting
          type: skip
          value: "3,a"
          order: 1
      definition: A &= ~0x08n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xA0"
        - field: instructionFormatting
          type: skip
          value: "4,b"
          order: 1
      definition: B &= ~0x10n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xA1"
        - field: instructionFormatting
          type: skip
          value: "4,c"
          order: 1
      definition: C &= ~0x10n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xA2"
        - field: instructionFormatting
          type: skip
          value: "4,d"
          order: 1
      definition: D &= ~0x10n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xA3"
        - field: instructionFormatting
          type: skip
          value: "4,e"
          order: 1
      definition: E &= ~0x10n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xA4"
        - field: instructionFormatting
          type: skip
          value: "4,h"
          order: 1
      definition: H &= ~0x10n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xA5"
        - field: instructionFormatting
          type: skip
          value: "4,l"
          order: 1
      definition: L &= ~0x10n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xA7"
        - field: instructionFormatting
          type: skip
          value: "4,a"
          order: 1
      definition: A &= ~0x10n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xA8"
        - field: instructionFormatting
          type: skip
          value: "5,b"
          order: 1
      definition: B &= ~0x20n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xA9"
        - field: instructionFormatting
          type: skip
          value: "5,c"
          order: 1
      definition: C &= ~0x20n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xAA"
        - field: instructionFormatting
          type: skip
          value: "5,d"
          order: 1
      definition: D &= ~0x20n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xAB"
        - field: instructionFormatting
          type: skip
          value: "5,e"
          order: 1
      definition: E &= ~0x20n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xAC"
        - field: instructionFormatting
          type: skip
          value: "5,h"
          order: 1
      definition: H &= ~0x20n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xAD"
        - field: instructionFormatting
          type: skip
          value: "5,l"
          order: 1
      definition: L &= ~0x20n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xAF"
        - field: instructionFormatting
          type: skip
          value: "5,a"
          order: 1
      definition: A &= ~0x20n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xB0"
        - field: instructionFormatting
          type: skip
          value: "6,b"
          order: 1
      definition: B &= ~0x40n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xB1"
        - field: instructionFormatting
          type: skip
          value: "6,c"
          order: 1
      definition: C &= ~0x40n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xB2"
        - field: instructionFormatting
          type: skip
          value: "6,d"
          order: 1
      definition: D &= ~0x40n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xB3"
        - field: instructionFormatting
          type: skip
          value: "6,e"
          order: 1
      definition: E &= ~0x40n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xB4"
        - field: instructionFormatting
          type: skip
          value: "6,h"
          order: 1
      definition: H &= ~0x40n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xB5"
        - field: instructionFormatting
          type: skip
          value: "6,l"
          order: 1
      definition: L &= ~0x40n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xB7"
        - field: instructionFormatting
          type: skip
          value: "6,a"
          order: 1
      definition: A &= ~0x40n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xB8"
        - field: instructionFormatting
          type: skip
          value: "7,b"
          order: 1
      definition: B &= ~0x80n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xB9"
        - field: instructionFormatting
          type: skip
          value: "7,c"
          order: 1
      definition: C &= ~0x80n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xBA"
        - field: instructionFormatting
          type: skip
          value: "7,d"
          order: 1
      definition: D &= ~0x80n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xBB"
        - field: instructionFormatting
          type: skip
          value: "7,e"
          order: 1
      definition: E &= ~0x80n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xBC"
        - field: instructionFormatting
          type: skip
          value: "7,h"
          order: 1
      definition: H &= ~0x80n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xBD"
        - field: instructionFormatting
          type: skip
          value: "7,l"
          order: 1
      definition: L &= ~0x80n;
    - name: res
      template: CB
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0xBF"
        - field: instructionFormatting
          type: skip
          value: "7,a"
          order: 1
      definition: A &= ~0x80n;

    - name: neg
      template: ED
      nwords: 2
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x44"
      definition: |
        // The contents of A are negated (two's complement).
        // This is equivalent to 0 - A.
        const oldValueA = A;
        A = (0n - oldValueA) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SUB(0n, oldValueA);

    - name: ld
      template: ED
      nwords: 2
      clk_cycles: 9
      fields:
        - field: opcode2
          value: "0x47"
        - field: instructionFormatting
          type: skip # This is ONLY for visualization purposes, it is not a real field
          value: "i, a"
          order: 2
      definition: |
        // Loads the value of A into the I register.
        I = A;

    - name: ld
      template: ED
      nwords: 4
      clk_cycles: 20
      fields:
        - field: opcode2
          value: "0x5B"
        - field: instructionFormatting
          type: skip
          value: "de,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          prefix: "("
          suffix: ")"
          order: 2
          word: [3, 2]
      definition: |
        // Loads the value pointed to by nn into DE.
        E = CAPI.MEM.read(nn, 1);
        D = CAPI.MEM.read(nn + 1n, 1);

    - name: ld
      template: ED
      nwords: 4
      clk_cycles: 20
      fields:
        - field: opcode2
          value: "0x6B"
        - field: instructionFormatting
          type: skip
          value: "hl,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          prefix: "("
          suffix: ")"
          order: 2
          word: [3, 2]
      definition: |
        // Loads the value pointed to by nn into HL.
        L = CAPI.MEM.read(nn, 1);
        H = CAPI.MEM.read(nn + 1n, 1);

    - name: ld
      template: ED
      nwords: 4
      clk_cycles: 20
      fields:
        - field: opcode2
          value: "0x7B"
        - field: instructionFormatting
          type: skip
          value: "sp,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          prefix: "("
          suffix: ")"
          order: 2
          word: [3, 2]
      definition: |
        // Loads the value pointed to by nn into SP
        lowSP = CAPI.MEM.read(nn, 1);
        highSP = CAPI.MEM.read(nn + 1n, 1);
        SP = (highSP << 8n) | lowSP;
    - name: lddr
      template: ED
      # Cycles: 21 if BC != 0, 16 if BC = 0. Handled in definition.
      fields:
        - field: opcode2
          value: "0xB8"
      definition: |
        // 1. Combine registers into 16-bit values
        const hlAddr = (H << 8n) | L;
        const deAddr = (D << 8n) | E;
        let bcCount = (B << 8n) | C;

        // 2. Perform the single-byte transfer. This happens even if bcCount is 1.
        const byteToCopy = CAPI.MEM.read(hlAddr, 1);
        CAPI.MEM.write(deAddr, 1, byteToCopy);

        // 3. Update registers
        const newHL = (hlAddr - 1n) & 0xFFFFn;
        const newDE = (deAddr - 1n) & 0xFFFFn;
        bcCount = (bcCount - 1n) & 0xFFFFn;
        
        H = (newHL >> 8n) & 0xFFn;
        L = newHL & 0xFFn;
        D = (newDE >> 8n) & 0xFFn;
        E = newDE & 0xFFn;
        B = (bcCount >> 8n) & 0xFFn;
        C = bcCount & 0xFFn;
        
        // 4. Update flags according to Z80 specification
        // S, Z, C are unaffected. H and N are reset. P/V is set if BC != 0.
        let newF = F & (CAPI.Z80.S_FLAG | CAPI.Z80.Z_FLAG | CAPI.Z80.C_FLAG);

        // 5. Check for repeat condition
        if (bcCount !== 0n) {
            newF |= CAPI.Z80.PV_FLAG;
            // Rewind PC to re-execute this instruction
            PC = (PC - 2n) & 0xFFFFn;
            // set_private_field("clk_cycles", 21); // Optional: for accurate timing
        } else {
            // P/V is reset when BC becomes 0.
            // set_private_field("clk_cycles", 16); // Optional: for accurate timing
        }
        
        F = newF;
  
    - name: ldir
      template: ED
      # Cycles: 21 if BC != 0, 16 if BC = 0. Handled in definition.
      fields:
        - field: opcode2
          value: "0xB0"
      definition: |
        // 1. Combine registers into 16-bit values
        const hlAddr = (H << 8n) | L;
        const deAddr = (D << 8n) | E;
        let bcCount = (B << 8n) | C;

        // 2. Perform the single-byte transfer. This happens even if bcCount is 1.
        const byteToCopy = CAPI.MEM.read(hlAddr, 1);
        CAPI.MEM.write(deAddr, 1, byteToCopy);

        // 3. Update registers
        const newHL = (hlAddr + 1n) & 0xFFFFn;
        const newDE = (deAddr + 1n) & 0xFFFFn;
        bcCount = (bcCount - 1n) & 0xFFFFn;
        
        H = (newHL >> 8n) & 0xFFn;
        L = newHL & 0xFFn;
        D = (newDE >> 8n) & 0xFFn;
        E = newDE & 0xFFn;
        B = (bcCount >> 8n) & 0xFFn;
        C = bcCount & 0xFFn;
        
        // 4. Update flags according to Z80 specification
        // S, Z, C are unaffected. H and N are reset. P/V is set if BC != 0.
        let newF = F & (CAPI.Z80.S_FLAG | CAPI.Z80.Z_FLAG | CAPI.Z80.C_FLAG); 

        // 5. Check for repeat condition
        if (bcCount !== 0n) {
            newF |= CAPI.Z80.PV_FLAG;
            // Rewind PC to re-execute this instruction
            PC = (PC - 2n) & 0xFFFFn;
            // set_private_field("clk_cycles", 21); // Optional: for accurate timing
        } else {
            // P/V is reset when BC becomes 0.
            // set_private_field("clk_cycles", 16); // Optional: for accurate timing
        }
        
        F = newF;

    - name: im
      template: ED
      nwords: 2
      clk_cycles: 8
      fields:
        - field: opcode2
          value: "0x56"
        - field: instructionFormatting
          type: skip
          value: "1"
          order: 1
      definition: |
        // Set the interrupt mode to 1 (stored in internal CPU state)
        if (typeof CAPI.Z80.interruptMode === 'undefined') {
          CAPI.Z80.interruptMode = 0;
        }
        CAPI.Z80.interruptMode = 1;

    - name: reti
      template: ED
      nwords: 2
      clk_cycles: 14
      fields:
        - field: opcode2
          value: "0x4D"
      definition: |
        // Return from interrupt
        // Restore IFF1 from IFF2 (re-enable interrupts if they were enabled before)
        IFF1 = IFF2;
        // Pop return address from stack
        PC = CAPI.MEM.read(SP, 1) | (CAPI.MEM.read((SP + 1n) & 0xFFFFn, 1) << 8n);
        SP = (SP + 2n) & 0xFFFFn;

    - name: ld
      template: FD
      nwords: 4
      fields:
        - field: opcode2
          value: "0x21"
        - field: instructionFormatting
          type: skip
          value: "iy,"
          order: 1
        - field: nn
          type: inm-unsigned
          startbit: 15
          stopbit: 0
          order: 2
          word: [3, 2]
      definition: |
        // Loads the 16-bit value nn into the IY register.
        // nn is a 16-bit unsigned integer.
        IY = nn;

    - name: ld
      template: FD
      nwords: 4
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x36"
        - field: instructionFormatting
          type: skip
          value: "(iy+"
          order: 1
        - field: d
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 2
          word: 2
        - field: instructionFormatting
          type: skip
          value: "),"
          order: 3
        - field: n
          type: inm-unsigned
          startbit: 7
          stopbit: 0
          order: 4
          word: 3
      definition: |
        // Loads the immediate value n into the memory location (IY + d).
        const addr = (IY + d) & 0xFFFFn;
        CAPI.MEM.write(addr, 1, n);

    - name: inc
      template: FD
      nwords: 3
      clk_cycles: 23
      fields:
        - field: opcode2
          value: "0x34"
        - field: instructionFormatting
          type: skip
          value: "(iy+"
          order: 1
        - field: d
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 2
          word: 2
        - field: instructionFormatting
          type: skip
          value: ")"
          order: 3
      definition: |
        // Increments the byte at memory location (IY + d).
        const addr = (IY + d) & 0xFFFFn;
        const oldValue = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, (oldValue + 1n) & 0xFFn);
        F = CAPI.Z80.calculateFlags_INC(oldValue, F);

    - name: dec
      template: FD
      nwords: 3
      clk_cycles: 23
      fields:
        - field: opcode2
          value: "0x35"
        - field: instructionFormatting
          type: skip
          value: "(iy+"
          order: 1
        - field: d
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 2
          word: 2
        - field: instructionFormatting
          type: skip
          value: ")"
          order: 3
      definition: |
        // Decrements the byte at memory location (IY + d).
        const addr = (IY + d) & 0xFFFFn;
        const oldValue = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, (oldValue - 1n) & 0xFFn);
        F = CAPI.Z80.calculateFlags_DEC(oldValue, F);

    - name: ld
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x70"
        - field: instructionFormatting
          type: skip
          value: "(iy+"
          order: 1
        - field: displacement
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 2
          word: 2
        - field: instructionFormatting2
          type: skip
          value: "),b"
          order: 3
      definition: |
        // Stores B to the memory location pointed to by IY plus d.
        const addr = (IY + displacement) & 0xFFFFn;
        CAPI.MEM.write(addr, 1, B);

    - name: ld
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x71"
        - field: instructionFormatting
          type: skip
          value: "(iy+"
          order: 1
        - field: displacement
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 2
          word: 2
        - field: instructionFormatting2
          type: skip
          value: "),c"
          order: 3
      definition: |
        // Stores C to the memory location pointed to by IY plus d.
        const addr = (IY + displacement) & 0xFFFFn;
        CAPI.MEM.write(addr, 1, C);

    - name: ld
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x72"
        - field: instructionFormatting
          type: skip
          value: "(iy+"
          order: 1
        - field: displacement
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 2
          word: 2
        - field: instructionFormatting2
          type: skip
          value: "),d"
          order: 3
      definition: |
        // Stores D to the memory location pointed to by IY plus d.
        const addr = (IY + displacement) & 0xFFFFn;
        CAPI.MEM.write(addr, 1, D);

    - name: ld
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x73"
        - field: instructionFormatting
          type: skip
          value: "(iy+"
          order: 1
        - field: displacement
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 2
          word: 2
        - field: instructionFormatting2
          type: skip
          value: "),d"
          order: 3
      definition: |
        // Stores D to the memory location pointed to by IY plus d.
        const addr = (IY + displacement) & 0xFFFFn;
        CAPI.MEM.write(addr, 1, D);

    - name: ld
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x74"
        - field: instructionFormatting
          type: skip
          value: "(iy+"
          order: 1
        - field: displacement
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 2
          word: 2
        - field: instructionFormatting2
          type: skip
          value: "),h"
          order: 3
      definition: |
        // Stores H to the memory location pointed to by IY plus d.
        const addr = (IY + displacement) & 0xFFFFn;
        CAPI.MEM.write(addr, 1, H);

    - name: ld
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x75"
        - field: instructionFormatting
          type: skip
          value: "(iy+"
          order: 1
        - field: displacement
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 2
          word: 2
        - field: instructionFormatting2
          type: skip
          value: "),l"
          order: 3
      definition: |
        // Stores L to the memory location pointed to by IY plus d.
        const addr = (IY + displacement) & 0xFFFFn;
        CAPI.MEM.write(addr, 1, L);

    - name: ld
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x77"
        - field: instructionFormatting
          type: skip
          value: "(iy+"
          order: 1
        - field: displacement
          type: inm-signed
          startbit: 7
          stopbit: 0
          order: 2
          word: 2
        - field: instructionFormatting2
          type: skip
          value: "),a"
          order: 3
      definition: |
        // Stores A to the memory location pointed to by IY plus d.
        const addr = (IY + displacement) & 0xFFFFn;
        CAPI.MEM.write(addr, 1, A);

    - name: ld
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x4E"
        - field: instructionFormatting
          type: skip
          value: "c,"
          order: 1
        - field: d
          type: inm-signed
          startbit: 7
          stopbit: 0
          prefix: "(iy+"
          suffix: ")"
          order: 2
          word: 2
      definition: |
        // Loads the value pointed to by IY plus d into C.
        const addr = (IY + d) & 0xFFFFn;
        C = CAPI.MEM.read(addr, 1);

    - name: ld
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x5E"
        - field: instructionFormatting
          type: skip
          value: "e,"
          order: 1
        - field: d
          type: inm-signed
          startbit: 7
          stopbit: 0
          prefix: "(iy+"
          suffix: ")"
          order: 2
          word: 2
      definition: |
        // Loads the value pointed to by IY plus d into E.
        const addr = (IY + d) & 0xFFFFn;
        E = CAPI.MEM.read(addr, 1);

    - name: ld
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x6E"
        - field: instructionFormatting
          type: skip
          value: "l,"
          order: 1
        - field: d
          type: inm-signed
          startbit: 7
          stopbit: 0
          prefix: "(iy+"
          suffix: ")"
          order: 2
          word: 2
      definition: |
        // Loads the value pointed to by IY plus d into L.
        const addr = (IY + d) & 0xFFFFn;
        L = CAPI.MEM.read(addr, 1);
      
    - name: ld
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x7E"
        - field: instructionFormatting
          type: skip
          value: "a,"
          order: 1
        - field: d
          type: inm-signed
          startbit: 7
          stopbit: 0
          prefix: "(iy+"
          suffix: ")"
          order: 2
          word: 2
      definition: |
        // Loads the value pointed to by IY plus d into A.
        const addr = (IY + d) & 0xFFFFn;
        A = CAPI.MEM.read(addr, 1);

    - name: ld
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x46"
        - field: instructionFormatting
          type: skip
          value: "b,"
          order: 1
        - field: d
          type: inm-signed
          startbit: 7
          stopbit: 0
          prefix: "(iy+"
          suffix: ")"
          order: 2
          word: 2
      definition: |
        // Loads the value pointed to by IY plus d into B.
        const addr = (IY + d) & 0xFFFFn;
        B = CAPI.MEM.read(addr, 1);

    - name: ld
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x56"
        - field: instructionFormatting
          type: skip
          value: "d,"
          order: 1
        - field: d
          type: inm-signed
          startbit: 7
          stopbit: 0
          prefix: "(iy+"
          suffix: ")"
          order: 2
          word: 2
      definition: |
        // Loads the value pointed to by IY plus d into D.
        const addr = (IY + d) & 0xFFFFn;
        D = CAPI.MEM.read(addr, 1);

    - name: ld
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x66"
        - field: instructionFormatting
          type: skip
          value: "h,"
          order: 1
        - field: d
          type: inm-signed
          startbit: 7
          stopbit: 0
          prefix: "(iy+"
          suffix: ")"
          order: 2
          word: 2
      definition: |
        // Loads the value pointed to by IY plus d into H.
        const addr = (IY + d) & 0xFFFFn;
        H = CAPI.MEM.read(addr, 1);

    - name: add
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x86"
        - field: instructionFormatting
          type: skip
          value: "a,"
          order: 1
        - field: d
          type: inm-signed
          startbit: 7
          stopbit: 0
          prefix: "(iy+"
          suffix: ")"
          order: 2
          word: 2
      definition: |
        // Adds the value pointed to by IY plus d to A.
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        const oldValueA = A;
        A = (oldValueA + value) & 0xFFn;
        F = CAPI.Z80.calculateFlags_ADD(oldValueA, value);

    - name: sub
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0x96"
        - field: instructionFormatting
          type: skip
          value: "a,"
          order: 1
        - field: d
          type: inm-signed
          startbit: 7
          stopbit: 0
          prefix: "(iy+"
          suffix: ")"
          order: 2
          word: 2
      definition: |
        // Subtracts the value pointed to by IY plus d from A.
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        const oldValueA = A;
        A = (oldValueA - value) & 0xFFn;
        F = CAPI.Z80.calculateFlags_SUB(oldValueA, value);

    - name: and
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0xA6"
        - field: instructionFormatting
          type: skip
          value: "a,"
          order: 1
        - field: d
          type: inm-signed
          startbit: 7
          stopbit: 0
          prefix: "(iy+"
          suffix: ")"
          order: 2
          word: 2
      definition: |
        // Bitwise AND on A with the value pointed to by IY plus d.
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        A = A & value;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 1);

    - name: or
      template: FD
      nwords: 3
      clk_cycles: 19
      fields:
        - field: opcode2
          value: "0xB6"
        - field: instructionFormatting
          type: skip
          value: "a,"
          order: 1
        - field: d
          type: inm-signed
          startbit: 7
          stopbit: 0
          prefix: "(iy+"
          suffix: ")"
          order: 2
          word: 2
      definition: |
        // Bitwise OR on A with the value pointed to by IY plus d.
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        A = A | value;
        F = CAPI.Z80.calculateFlags_LOGICAL(A, 0);

    - name: sbc
      template: ED
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0x42"
        - field: instructionFormatting
          type: skip
          value: "hl, bc"
          order: 1
      definition: |        
        // 1. Get 16-bit operands
        const hlValue = (H << 8n) | L;
        const bcValue = (B << 8n) | C;
        
        // 2. Perform the subtraction
        const carry = F & CAPI.Z80.C_FLAG;
        const result = (hlValue - bcValue - carry) & 0xFFFFn;
        
        // 3. Call the helper function to calculate all flags.
        //    We pass the original values to it.
        F = CAPI.Z80.calculateFlags_SBC16(hlValue, bcValue, F);
        
        // 4. Update the destination register pair (HL) with the result.
        H = (result >> 8n) & 0xFFn;
        L = result & 0xFFn;

    - name: sbc
      template: ED
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0x52"
        - field: instructionFormatting
          type: skip
          value: "hl, de"
          order: 1
      definition: |        
        // 1. Get 16-bit operands
        const hlValue = (H << 8n) | L;
        const deValue = (D << 8n) | E;
        
        // 2. Perform the subtraction
        const carry = F & CAPI.Z80.C_FLAG;
        const result = (hlValue - deValue - carry) & 0xFFFFn;

        // 3. Call the helper function to calculate all flags.
        //    We pass the original values to it.
        F = CAPI.Z80.calculateFlags_SBC16(hlValue, deValue, F);

        // 4. Update the destination register pair (HL) with the result.
        H = (result >> 8n) & 0xFFn;
        L = result & 0xFFn;
      
    - name: sbc
      template: ED
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0x62"
        - field: instructionFormatting
          type: skip
          value: "hl, hl"
          order: 1
      definition: |        
        // 1. Get 16-bit operands
        const hlValue = (H << 8n) | L;
        const hlValue2 = (H << 8n) | L;

        // 2. Perform the subtraction
        const carry = F & CAPI.Z80.C_FLAG;
        const result = (hlValue - hlValue2 - carry) & 0xFFFFn;

        // 3. Call the helper function to calculate all flags.
        //    We pass the original values to it.
        F = CAPI.Z80.calculateFlags_SBC16(hlValue, hlValue2, F);

        // 4. Update the destination register pair (HL) with the result.
        H = (result >> 8n) & 0xFFn;
        L = result & 0xFFn;

    - name: sbc
      template: ED
      clk_cycles: 15
      fields:
        - field: opcode2
          value: "0x72"
        - field: instructionFormatting
          type: skip
          value: "hl, sp"
          order: 1
      definition: |        
        // 1. Get 16-bit operands
        const hlValue = (H << 8n) | L;
        
        // 2. Perform the subtraction
        const carry = F & CAPI.Z80.C_FLAG;
        const result = (hlValue - SP - carry) & 0xFFFFn;

        // 3. Call the helper function to calculate all flags.
        //    We pass the original values to it.
        F = CAPI.Z80.calculateFlags_SBC16(hlValue, SP, F);

        // 4. Update the destination register pair (HL) with the result.
        H = (result >> 8n) & 0xFFn;
        L = result & 0xFFn;

    # SET b, (IY+d)
    - name: set
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xC6"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "0,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x01n);
    - name: set
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xCE"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "1,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x02n);
    - name: set
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xD6"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "2,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x04n);
    - name: set
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xDE"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "3,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x08n);
    - name: set
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xE6"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "4,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x10n);
    - name: set
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xEE"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "5,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x20n);
    - name: set
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xF6"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "6,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x40n);
    - name: set
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xFE"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "7,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value | 0x80n);

    # RES b, (IY+d)
    - name: res
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0x86"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "0,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x01n);
    - name: res
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0x8E"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "1,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x02n);
    - name: res
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0x96"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "2,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x04n);
    - name: res
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0x9E"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "3,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x08n);
    - name: res
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xA6"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "4,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x10n);
    - name: res
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xAE"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "5,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x20n);
    - name: res
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xB6"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "6,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x40n);
    - name: res
      template: FDCB
      clk_cycles: 23
      fields:
        - field: opcode3
          value: "0xBE"
        - field: d
          order: 3
          suffix: ")"
        - field: instructionFormatting
          type: skip
          value: "7,(iy+"
          order: 1
      definition: |
        const addr = (IY + d) & 0xFFFFn;
        const value = CAPI.MEM.read(addr, 1);
        CAPI.MEM.write(addr, 1, value & ~0x80n);

interrupts:
  enabled: true
  check: |
    if (CAPI.Z80.interruptPin) {
      // If we have an interrupts request (INT pin is asserted)

      // Save the current PC on the stack, so we know where to return
      // Z80 pushes high byte first, then low byte (little endian)
      let returnAddress = CAPI.REG.read('PC');
      let sp = CAPI.REG.read('SP');
      
      // Push high byte first
      sp = (sp - 1n) & 0xFFFFn;
      CAPI.MEM.write(sp, 1, (returnAddress >> 8n) & 0xFFn);
      
      // Then push low byte
      sp = (sp - 1n) & 0xFFFFn;
      CAPI.MEM.write(sp, 1, returnAddress & 0xFFn);
      
      // Update SP
      CAPI.REG.write(sp, 'SP');

      InterruptType.External;
    } else {
      null;
    }
  is_enabled: |
    // Check if interrupts are enabled (IFF1 flag)
    !!(CAPI.REG.read('IFF1') & 1n)
  enable: |
    // Enable interrupts - set both IFF1 and IFF2
    CAPI.REG.write(1n, 'IFF1');
    CAPI.REG.write(1n, 'IFF2');
  disable: |
    // Disable interrupts - clear both IFF1 and IFF2  
    CAPI.REG.write(0n, 'IFF1');
    CAPI.REG.write(0n, 'IFF2');
  get_handler_addr: |
    if (CAPI.Z80.interruptMode === 1) {
      // Mode 1: Always jump to RST 38h (0x0038)
      0x0038n;
    } else if (CAPI.Z80.interruptMode === 0) {
      // Mode 0: Execute instruction from data bus (simplified as RST 38h)
      0x0038n;
    } else {
      0x0038n;
    }
  clear: |
    // Clear the simulated INT pin
    if (typeof CAPI.Z80.interruptPin  !== 'undefined') {
      CAPI.Z80.interruptPin = false;
    }
  create: |
    (interrupt_type) => {
      // Simulate asserting the INT pin (like external hardware would do)
      if (typeof CAPI.Z80.interruptPin === 'undefined') {
        CAPI.Z80.interruptPin = false;
      }
      
      switch (interrupt_type) {
        case InterruptType.External:
          CAPI.Z80.interruptPin = true; // Assert INT pin
          break;
        case InterruptType.Timer:
          CAPI.Z80.interruptPin = true; // Timer also uses maskable interrupt
          break;
        default:
          CAPI.Z80.interruptPin = true;
          break;
      }
    };

timer:
  tick_cycles: 1
  advance: |
    CAPI.Z80.timerCounter++;
  handler: |
    if (CAPI.Z80.timerCounter >= 70000n) { // Sinclair ZX Spectrum ~50Hz (70000 cycles at 3.5MHz)
      CAPI.Z80.timerCounter = 0n;
      CAPI.INTERRUPTS.make(CAPI.INTERRUPTS.Type.Timer);
    }
  is_enabled: |
    // Timer interrupts enabled if global interrupts are enabled
    return !!(CAPI.REG.read('IFF1') & 1n);
  enable: | 
    return true;
  disable: |
    return false;